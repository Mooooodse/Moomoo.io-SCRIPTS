// ==UserScript==
// @name        Insanity Mod v1.2.6 Beta
// @namespace    -
// @version      Beta
// @description  Little Op Mod Sometimes The Anti Insta Is Not Very Good But  Later I Fix The Anti :D
// @author       InsanityMon
// @match        *://sandbox.moomoo.io/*
// @match        *://moomoo.io/*
// @grant        none
// @require https://greasyfork.org/scripts/368273-msgpack/code/msgpack.js?version=598723
// @require http://code.jquery.com/jquery-3.3.1.min.js
// @require https://code.jquery.com/ui/1.12.0/jquery-ui.min.js
// @require https://cdnjs.cloudflare.com/ajax/libs/jquery-confirm/3.3.0/jquery-confirm.min.js
// @require https://cdn.jsdelivr.net/gh/emn178/js-sha3/build/sha3.min.js
// @require https://ksw2-center.glitch.me/users/fzb/antiinvis_1
//          Share scripts server:  https://discord.gg/HabBEraybj
//          Share scripts server:  https://discord.gg/HabBEraybj
//          Share scripts server:  https://discord.gg/HabBEraybj
// Add:
// Lag Insta
// Auto Insta
// Fps Counter
// Keys:
// R Insta
// T Reverse Insta
// Y Lag Insta |Sometimes Stacked Sometimes Not Stacked|
// U Age 1 Insta
// N 3 Mills
// B Anti Bull
// . Boost One tick
// / Auto Mill
// K Katana Musket
// !km katana musket
// !pm polearm musket 
// !shb stick hammer boost pad
// !dh dagger hammer 
// Subsribe For More Beta Mods Next Mod Is Privated mod v1 Share On 30 Subs Good Luck Guys :)
// ==/UserScript==
// DID YOU LIKE AND SUBSCRIBE?????

(function() {
    'use strict';

    function serialize(data) {
        const pow32 = 0x100000000;
        let floatBuffer, floatView;
        let array = new Uint8Array(128);
        let length = 0;
        append(data);
        return array.subarray(0, length);

        function append(data) {
            switch (typeof data) {
                case "undefined":
                    appendNull(data);
                    break;
                case "boolean":
                    appendBoolean(data);
                    break;
                case "number":
                    appendNumber(data);
                    break;
                case "string":
                    appendString(data);
                    break;
                case "object":
                    if (data === null) {
                        appendNull(data);
                    } else if (data instanceof Date) {
                        appendDate(data);
                    } else if (Array.isArray(data)) {
                        appendArray(data);
                    } else if (data instanceof Uint8Array || data instanceof Uint8ClampedArray) {
                        appendBinArray(data);
                    } else if (data instanceof Int8Array || data instanceof Int16Array || data instanceof Uint16Array ||
                               data instanceof Int32Array || data instanceof Uint32Array ||
                               data instanceof Float32Array || data instanceof Float64Array) {
                        appendArray(data);
                    } else {
                        appendObject(data);
                    }
                    break;
            }
        }

        function appendNull(data) {
            appendByte(0xc0);
        }

        function appendBoolean(data) {
            appendByte(data ? 0xc3 : 0xc2);
        }

        function appendNumber(data) {
            if (isFinite(data) && Math.floor(data) === data) {
                if (data >= 0 && data <= 0x7f) {
                    appendByte(data);
                } else if (data < 0 && data >= -0x20) {
                    appendByte(data);
                } else if (data > 0 && data <= 0xff) { // uint8
                    appendBytes([0xcc, data]);
                } else if (data >= -0x80 && data <= 0x7f) { // int8
                    appendBytes([0xd0, data]);
                } else if (data > 0 && data <= 0xffff) { // uint16
                    appendBytes([0xcd, data >>> 8, data]);
                } else if (data >= -0x8000 && data <= 0x7fff) { // int16
                    appendBytes([0xd1, data >>> 8, data]);
                } else if (data > 0 && data <= 0xffffffff) { // uint32
                    appendBytes([0xce, data >>> 24, data >>> 16, data >>> 8, data]);
                } else if (data >= -0x80000000 && data <= 0x7fffffff) { // int32
                    appendBytes([0xd2, data >>> 24, data >>> 16, data >>> 8, data]);
                } else if (data > 0 && data <= 0xffffffffffffffff) { // uint64
                    let hi = data / pow32;
                    let lo = data % pow32;
                    appendBytes([0xd3, hi >>> 24, hi >>> 16, hi >>> 8, hi, lo >>> 24, lo >>> 16, lo >>> 8, lo]);
                } else if (data >= -0x8000000000000000 && data <= 0x7fffffffffffffff) { // int64
                    appendByte(0xd3);
                    appendInt64(data);
                } else if (data < 0) { // below int64
                    appendBytes([0xd3, 0x80, 0, 0, 0, 0, 0, 0, 0]);
                } else { // above uint64
                    appendBytes([0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]);
                }
            } else {
                if (!floatView) {
                    floatBuffer = new ArrayBuffer(8);
                    floatView = new DataView(floatBuffer);
                }
                floatView.setFloat64(0, data);
                appendByte(0xcb);
                appendBytes(new Uint8Array(floatBuffer));
            }
        }

        function appendString(data) {
            let bytes = encodeUtf8(data);
            let length = bytes.length;

            if (length <= 0x1f) {
                appendByte(0xa0 + length);
            } else if (length <= 0xff) {
                appendBytes([0xd9, length]);
            } else if (length <= 0xffff) {
                appendBytes([0xda, length >>> 8, length]);
            } else {
                appendBytes([0xdb, length >>> 24, length >>> 16, length >>> 8, length]);
            }

            appendBytes(bytes);
        }

        function appendArray(data) {
            let length = data.length;

            if (length <= 0xf) {
                appendByte(0x90 + length);
            } else if (length <= 0xffff) {
                appendBytes([0xdc, length >>> 8, length]);
            } else {
                appendBytes([0xdd, length >>> 24, length >>> 16, length >>> 8, length]);
            }

            for (let index = 0; index < length; index++) {
                append(data[index]);
            }
        }

        function appendBinArray(data) {
            let length = data.length;

            if (length <= 0xf) {
                appendBytes([0xc4, length]);
            } else if (length <= 0xffff) {
                appendBytes([0xc5, length >>> 8, length]);
            } else {
                appendBytes([0xc6, length >>> 24, length >>> 16, length >>> 8, length]);
            }

            appendBytes(data);
        }

        function appendObject(data) {
            let length = 0;
            for (let key in data) length++;

            if (length <= 0xf) {
                appendByte(0x80 + length);
            } else if (length <= 0xffff) {
                appendBytes([0xde, length >>> 8, length]);
            } else {
                appendBytes([0xdf, length >>> 24, length >>> 16, length >>> 8, length]);
            }

            for (let key in data) {
                append(key);
                append(data[key]);
            }
        }

        function appendDate(data) {
            let sec = data.getTime() / 1000;
            if (data.getMilliseconds() === 0 && sec >= 0 && sec < 0x100000000) { // 32 bit seconds
                appendBytes([0xd6, 0xff, sec >>> 24, sec >>> 16, sec >>> 8, sec]);
            }
            else if (sec >= 0 && sec < 0x400000000) { // 30 bit nanoseconds, 34 bit seconds
                let ns = data.getMilliseconds() * 1000000;
                appendBytes([0xd7, 0xff, ns >>> 22, ns >>> 14, ns >>> 6, ((ns << 2) >>> 0) | (sec / pow32), sec >>> 24, sec >>> 16, sec >>> 8, sec]);
            }
            else { // 32 bit nanoseconds, 64 bit seconds, negative values allowed
                let ns = data.getMilliseconds() * 1000000;
                appendBytes([0xc7, 12, 0xff, ns >>> 24, ns >>> 16, ns >>> 8, ns]);
                appendInt64(sec);
            }
        }

        function appendByte(byte) {
            if (array.length < length + 1) {
                let newLength = array.length * 2;
                while (newLength < length + 1)
                    newLength *= 2;
                let newArray = new Uint8Array(newLength);
                newArray.set(array);
                array = newArray;
            }
            array[length] = byte;
            length++;
        }

        function appendBytes(bytes) {
            if (array.length < length + bytes.length) {
                let newLength = array.length * 2;
                while (newLength < length + bytes.length)
                    newLength *= 2;
                let newArray = new Uint8Array(newLength);
                newArray.set(array);
                array = newArray;
            }
            array.set(bytes, length);
            length += bytes.length;
        }

        function appendInt64(value) {
            let hi, lo;
            if (value >= 0) {
                hi = value / pow32;
                lo = value % pow32;
            }
            else {
                value++;
                hi = Math.abs(value) / pow32;
                lo = Math.abs(value) % pow32;
                hi = ~hi;
                lo = ~lo;
            }
            appendBytes([hi >>> 24, hi >>> 16, hi >>> 8, hi, lo >>> 24, lo >>> 16, lo >>> 8, lo]);
        }
    }

    function deserialize(array) {
        const pow32 = 0x100000000; // 2^32
        let pos = 0;
        if (array instanceof ArrayBuffer) {
            array = new Uint8Array(array);
        }
        if (typeof array !== "object" || typeof array.length === "undefined") {
            throw new Error("Invalid argument type: Expected a byte array (Array or Uint8Array) to deserialize.");
        }
        if (!array.length) {
            throw new Error("Invalid argument: The byte array to deserialize is empty.");
        }
        if (!(array instanceof Uint8Array)) {
            array = new Uint8Array(array);
        }
        let data = read();
        if (pos < array.length) {
        }
        return data;

        function read() {
            const byte = array[pos++];
            if (byte >= 0x00 && byte <= 0x7f) return byte; // positive fixint
            if (byte >= 0x80 && byte <= 0x8f) return readMap(byte - 0x80); // fixmap
            if (byte >= 0x90 && byte <= 0x9f) return readArray(byte - 0x90); // fixarray
            if (byte >= 0xa0 && byte <= 0xbf) return readStr(byte - 0xa0); // fixstr
            if (byte === 0xc0) return null; // nil
            if (byte === 0xc1) throw new Error("Invalid byte code 0xc1 found."); // never used
            if (byte === 0xc2) return false // false
            if (byte === 0xc3) return true; // true
            if (byte === 0xc4) return readBin(-1, 1); // bin 8
            if (byte === 0xc5) return readBin(-1, 2); // bin 16
            if (byte === 0xc6) return readBin(-1, 4); // bin 32
            if (byte === 0xc7) return readExt(-1, 1); // ext 8
            if (byte === 0xc8) return readExt(-1, 2); // ext 16
            if (byte === 0xc9) return readExt(-1, 4) // ext 32
            if (byte === 0xca) return readFloat(4); // float 32
            if (byte === 0xcb) return readFloat(8); // float 64
            if (byte === 0xcc) return readUInt(1); // uint 8
            if (byte === 0xcd) return readUInt(2); // uint 16
            if (byte === 0xce) return readUInt(4); // uint 32
            if (byte === 0xcf) return readUInt(8) // uint 64
            if (byte === 0xd0) return readInt(1); // int 8
            if (byte === 0xd1) return readInt(2); // int 16
            if (byte === 0xd2) return readInt(4); // int 32
            if (byte === 0xd3) return readInt(8); // int 64
            if (byte === 0xd4) return readExt(1); // fixext 1
            if (byte === 0xd5) return readExt(2); // fixext 2
            if (byte === 0xd6) return readExt(4); // fixext 4
            if (byte === 0xd7) return readExt(8); // fixext 8
            if (byte === 0xd8) return readExt(16); // fixext 16
            if (byte === 0xd9) return readStr(-1, 1); // str 8
            if (byte === 0xda) return readStr(-1, 2); // str 16
            if (byte === 0xdb) return readStr(-1, 4); // str 32
            if (byte === 0xdc) return readArray(-1, 2); // array 16
            if (byte === 0xdd) return readArray(-1, 4); // array 32
            if (byte === 0xde) return readMap(-1, 2); // map 16
            if (byte === 0xdf) return readMap(-1, 4); // map 32
            if (byte >= 0xe0 && byte <= 0xff) return byte - 256; // negative fixint
            console.debug("msgpack array:", array);
            throw new Error("Invalid byte value '" + byte + "' at index " + (pos - 1) + " in the MessagePack binary data (length " + array.length + "): Expecting a range of 0 to 255. This is not a byte array.");
        }

        function readInt(size) {
            let value = 0;
            let first = true;
            while (size-- > 0) {
                if (first) {
                    let byte = array[pos++];
                    value += byte & 0x7f;
                    if (byte & 0x80) {
                        value -= 0x80;
                    }
                    first = false;
                }
                else {
                    value *= 256;
                    value += array[pos++];
                }
            }
            return value;
        }

        function readUInt(size) {
            let value = 0;
            while (size-- > 0) {
                value *= 256;
                value += array[pos++];
            }
            return value;
        }

        function readFloat(size) {
            let view = new DataView(array.buffer, pos, size);
            pos += size;
            if (size === 4) {
                return view.getFloat32(0, false);
            }
            if (size === 8) {
                return view.getFloat64(0, false);
            }
        }

        function readBin(size, lengthSize) {
            if (size < 0) size = readUInt(lengthSize);
            let data = array.subarray(pos, pos + size);
            pos += size;
            return data;
        }

        function readMap(size, lengthSize) {
            if (size < 0) size = readUInt(lengthSize);
            let data = {};
            while (size-- > 0) {
                let key = read();
                data[key] = read();
            }
            return data;
        }

        function readArray(size, lengthSize) {
            if (size < 0) size = readUInt(lengthSize);
            let data = [];
            while (size-- > 0) {
                data.push(read());
            }
            return data;
        }

        function readStr(size, lengthSize) {
            if (size < 0) size = readUInt(lengthSize);
            let start = pos;
            pos += size;
            return decodeUtf8(array, start, size);
        }

        function readExt(size, lengthSize) {
            if (size < 0) size = readUInt(lengthSize);
            let type = readUInt(1);
            let data = readBin(size);
            switch (type) {
                case 255:
                    return readExtDate(data);
            }
            return { type: type, data: data };
        }

        function readExtDate(data) {
            if (data.length === 4) {
                let sec = ((data[0] << 24) >>> 0) +
                    ((data[1] << 16) >>> 0) +
                    ((data[2] << 8) >>> 0) +
                    data[3];
                return new Date(sec * 1000);
            }
            if (data.length === 8) {
                let ns = ((data[0] << 22) >>> 0) +
                    ((data[1] << 14) >>> 0) +
                    ((data[2] << 6) >>> 0) +
                    (data[3] >>> 2);
                let sec = ((data[3] & 0x3) * pow32) +
                    ((data[4] << 24) >>> 0) +
                    ((data[5] << 16) >>> 0) +
                    ((data[6] << 8) >>> 0) +
                    data[7];
                return new Date(sec * 1000 + ns / 1000000);
            }
            if (data.length === 12) {
                let ns = ((data[0] << 24) >>> 0) +
                    ((data[1] << 16) >>> 0) +
                    ((data[2] << 8) >>> 0) +
                    data[3];
                pos -= 8;
                let sec = readInt(8);
                return new Date(sec * 1000 + ns / 1000000);
            }
            throw new Error("Invalid data length for a date value.");
        }
    }

    function encodeUtf8(str) {
        let ascii = true, length = str.length;
        for (let x = 0; x < length; x++) {
            if (str.charCodeAt(x) > 127) {
                ascii = false;
                break;
            }
        }

        let i = 0, bytes = new Uint8Array(str.length * (ascii ? 1 : 4));
        for (let ci = 0; ci !== length; ci++) {
            let c = str.charCodeAt(ci);
            if (c < 128) {
                bytes[i++] = c;
                continue;
            }
            if (c < 2048) {
                bytes[i++] = c >> 6 | 192;
            }
            else {
                if (c > 0xd7ff && c < 0xdc00) {
                    if (++ci >= length)
                        throw new Error("UTF-8 encode: incomplete surrogate pair");
                    let c2 = str.charCodeAt(ci);
                    if (c2 < 0xdc00 || c2 > 0xdfff)
                        throw new Error("UTF-8 encode: second surrogate character 0x" + c2.toString(16) + " at index " + ci + " out of range");
                    c = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
                    bytes[i++] = c >> 18 | 240;
                    bytes[i++] = c >> 12 & 63 | 128;
                }
                else bytes[i++] = c >> 12 | 224;
                bytes[i++] = c >> 6 & 63 | 128;
            }
            bytes[i++] = c & 63 | 128;
        }
        return ascii ? bytes : bytes.subarray(0, i);
    }

    function decodeUtf8(bytes, start, length) {
        let i = start, str = "";
        length += start;
        while (i < length) {
            let c = bytes[i++];
            if (c > 127) {
                if (c > 191 && c < 224) {
                    if (i >= length)
                        throw new Error("UTF-8 decode: incomplete 2-byte sequence");
                    c = (c & 31) << 6 | bytes[i++] & 63;
                }
                else if (c > 223 && c < 240) {
                    if (i + 1 >= length)
                        throw new Error("UTF-8 decode: incomplete 3-byte sequence");
                    c = (c & 15) << 12 | (bytes[i++] & 63) << 6 | bytes[i++] & 63;
                }
                else if (c > 239 && c < 248) {
                    if (i + 2 >= length)
                        throw new Error("UTF-8 decode: incomplete 4-byte sequence");
                    c = (c & 7) << 18 | (bytes[i++] & 63) << 12 | (bytes[i++] & 63) << 6 | bytes[i++] & 63;
                }
                else throw new Error("UTF-8 decode: unknown multibyte start 0x" + c.toString(16) + " at index " + (i - 1));
            }
            if (c <= 0xffff) str += String.fromCharCode(c);
            else if (c <= 0x10ffff) {
                c -= 0x10000;
                str += String.fromCharCode(c >> 10 | 0xd800)
                str += String.fromCharCode(c & 0x3FF | 0xdc00)
            }
            else throw new Error("UTF-8 decode: code point 0x" + c.toString(16) + " exceeds UTF-16 reach");
        }
        return str;
    }

    let msgpack = {
        serialize: serialize,
        deserialize: deserialize,

        encode: serialize,
        decode: deserialize
    };

    if (typeof module === "object" && module && typeof module.exports === "object") {
        module.exports = msgpack;
    }
    else {
        window[window.msgpackJsName || "msgpack"] = msgpack;
    }

})();

(function() {
    'use strict';
    var kills = 10;
    setInterval(getkills, 250);
    function getkills(){
        var count = parseInt(document.getElementById("killCounter").innerText);
        if(count > kills){
                doNewSend(["ch", ["Sub To InsanityMon"]]);
 }
        kills = count;
    }
})();

(function() {
    var UPDATE_DELAY = 700;

    var lastUpdate = 0;
    var frames = 0;

    var displayElement = document.createElement("div");
    displayElement.style.padding = "5px";
    displayElement.style.font = "16px Arial";
    displayElement.style.display = "block";
    displayElement.style.position = "fixed";
    displayElement.style.top = "0px";
    displayElement.style.left = "0px";
    displayElement.textContent = "L_oAnDin_";
    document.body.appendChild(displayElement);

    function cssColorToRGB(color) {
        var values;

        if (color.startsWith("rgba")) {
            values = color.substring(5, color.length - 1).split(",");
        } else if (color.startsWith("rgb")) {
            values = color.substring(4, color.length - 1).split(",");
        } else if (color.startsWith("#") && color.length === 4) {
            values = [];
            values[0] = "" + parseInt("0x" + color.substr(1, 1));
            values[1] = "" + parseInt("0x" + color.substr(2, 1));
            values[2] = "" + parseInt("0x" + color.substr(3, 1));
        } else if (color.startsWith("#") && color.length === 7) {
            values = [];
            values[0] = "" + parseInt("0x" + color.substr(1, 2));
            values[1] = "" + parseInt("0x" + color.substr(3, 2));
            values[2] = "" + parseInt("0x" + color.substr(5, 2));
        } else {
            return {r : 255, g : 255, b : 255};
        }

        return {
            r : Number(values[0]),
            g : Number(values[1]),
            b : Number(values[2])
        };
    }

    function getInvertedRGB(values) {
        return "rgb(" + (255 - values.r) + "," + (9 - values.g) + ","
            + (9 - values.b) + ")";
    }

    function getOpaqueRGB(values) {
        return "rgba(" + values.r + "," + values.g + "," + values.b + ",0.7)";
    }

    function updateCounter() {
        var bgColor = getComputedStyle(document.body, null).getPropertyValue(
            "background-color");
        var bgColorValues = cssColorToRGB(bgColor);
        var textColor = getInvertedRGB(bgColorValues);
        var displayBg = getOpaqueRGB(bgColorValues);
        displayElement.style.color = `hsl(${hue}, 100%, 50%)`;
        displayElement.style.background = displayBg;

        var now = Date.now();
        var elapsed = now - lastUpdate;
        if (elapsed < UPDATE_DELAY) {
            ++frames;
        } else {
            var fps = Math.round(frames / (elapsed / 1500));
            displayElement.textContent = fps + " Fps Counter (How Many Fps You Have)";
            frames = 0;
            lastUpdate = now;
        }

        requestAnimationFrame(updateCounter);
    }

    lastUpdate = Date.now();
    requestAnimationFrame(updateCounter);
})();

setInterval( () => {
    if(AutoInsta) {
        if(nearestEnemy) {
            nearestEnemyAngle = Math.atan2(nearestEnemy[2]-myPlayer.y, nearestEnemy[1]-myPlayer.x);
            if(Math.sqrt(Math.pow((myPlayer.y-nearestEnemy[2]), 2) + Math.pow((myPlayer.x-nearestEnemy[1]), 2)) < 270) {
                autoaim = true;
                silentaim = true;
                autoprimary = true;
                autosecondary = false;
                doNewSend(["13c", [0, 0, 1]]);
                doNewSend(["5", [primary, true]]);
                doNewSend(["7", [1]]);
                doNewSend(["13c", [1, 7, 0]]);
                doNewSend(["13c", [0, 7, 0]]);
                doNewSend(["13c", [1, 18, 1]]);
                doNewSend(["13c", [0, 18, 1]]);
                setTimeout( () => {
                    silentaim = true;
                    autoprimary = false;
                    autosecondary = true;
                    doNewSend(["13c", [0, 21, 1]]);
                    doNewSend(["13c", [1, 53, 0]]);
                    doNewSend(["13c", [0, 53, 0]]);
                    doNewSend(["5", [secondary, true]]);
                }, 95);
                setTimeout( () => {
                    doNewSend(["13c", [0, 0, 0]]);
                    doNewSend(["13c", [1, 6, 0]]);
                    doNewSend(["13c", [0, 6, 0]]);
                    doNewSend(["7", [1]]);
                    doNewSend(["13c", [1, 21, 1]]);
                    doNewSend(["13c", [0, 21, 1]]);
                    autosecondary = false;
                    autoprimary = false;
                    silentaim = false;
                    autoaim = false;
                }, 230);
            }
        }
    }
}, 1000);


setInterval( () => {
    if(Autobuy == true) {
        doNewSend(["13c", [1, 7, 0]]);
        doNewSend(["13c", [1, 6, 0]]);
        doNewSend(["13c", [1, 12, 0]]);
        doNewSend(["13c", [1, 11, 1]]);
        doNewSend(["13c", [1, 15, 0]]);
        doNewSend(["13c", [1, 31, 0]]);
        doNewSend(["13c", [1, 53, 0]]);
        doNewSend(["13c", [1, 20, 0]]);
        doNewSend(["13c", [1, 11, 0]]);
        doNewSend(["13c", [1, 40, 0]]);
        doNewSend(["13c", [1, 21, 1]]);
        doNewSend(["13c", [1, 18, 1]]);
        doNewSend(["13c", [1, 19, 1]]);
        doNewSend(["13c", [1, 13, 1]]);
        doNewSend(["13c", [1, 22, 0]]);
        doNewSend(["13c", [1, 13, 0]]);
    }
}, 0);
setInterval(() => {
    if(intrap == true && autobreak == true) {
        if(secondary == 10) {
            doNewSend(["c", [1]]);
            doNewSend(["5", [secondary, true]]);
            if(Break) {
                Break = false;
                doNewSend(["13c", [0, 40, 0]]);
                doNewSend(["13c", [1, 40, 0]]);
                doNewSend(["13c", [0, 21, 1]]);
                setTimeout( () => {
                    doNewSend(["13c", [0, 6, 0]]);
                    doNewSend(["13c", [1, 6, 0]]);
                    doNewSend(["13c", [0, 21, 1]]);
                }, 116);

                setTimeout( () => {
                    Break = true;
                }, 678);
            }
        } else {
            doNewSend(["c", [1]]);
            doNewSend(["5", [primary, true]]);
            if(Break) {
                doNewSend(["13c", [0, 40, 0]]);
                doNewSend(["13c", [1, 40, 0]]);
                doNewSend(["13c", [0, 21, 1]]);
                if(primary == 4) {
                    Break = false;
                    doNewSend(["13c", [0, 40, 0]]);
                    doNewSend(["13c", [1, 40, 0]]);
                    doNewSend(["13c", [0, 21, 1]]);
                    setTimeout( () => {
                        doNewSend(["13c", [0, 6, 0]]);
                        doNewSend(["13c", [1, 6, 0]]);
                        doNewSend(["13c", [0, 21, 1]]);
                    }, 105);

                    setTimeout( () => {
                        Break = true;
                    }, 462);
                }
                if(primary == 5) {
                    Break = false;
                    doNewSend(["13c", [0, 40, 0]]);
                    doNewSend(["13c", [1, 40, 0]]);
                    doNewSend(["13c", [0, 21, 1]]);
                    setTimeout( () => {
                        doNewSend(["13c", [0, 6, 0]]);
                        doNewSend(["13c", [1, 6, 0]]);
                        doNewSend(["13c", [0, 21, 1]]);
                    }, 183);

                    setTimeout( () => {
                        Break = true;
                    }, 903);
                }
            }
        }
    }
}, 5);

setInterval( () => {//this is AntiClown
    AntiClown(50, 20);
    AntiClown2(5, 2);
}, 800);

setInterval(() => {
    if(ae86Aim && autobreak) {
        aim(trapX, trapY);
    }
}, 5);

(function() {
    var trap1;
    var trap2;
    var trap3;
    var trapMod = true;
document.addEventListener('keydown', function(e) {
if (e.keyCode == 193 && document.activeElement.id.toLowerCase() !== 'chatbox') {
Autotrap = (Autotrap + 1) % 2;
if (Autotrap == 0) {
doNewSend(["ch", ["Autotrap: OFF"]]);
document.title = "Autotrap: OFF"
}else {
doNewSend(["ch", ["Autotrap: ON"]]);
document.title = "Autotrap: ON"
}
e.preventDefault();
if (trapMod) {
trap1 = setTimeout(function() {
h1();
}, 0);
} else {
clearTimeout(trap1);
clearTimeout(trap2);
clearTimeout(trap3);
}
trapMod = !trapMod;
}
}
);
function h1() {
clearTimeout(trap1);
    place(boostType, myPlayer.dir + toRad(0));
    place(boostType, myPlayer.dir + toRad(90));
    place(boostType, myPlayer.dir + toRad(120));
trap1 = setTimeout(function() {
h1();
}, 214);
}
function h2() {
clearTimeout(trap2);
    place(boostType, myPlayer.dir + toRad(120));
    place(boostType, myPlayer.dir + toRad(170));
    place(boostType, myPlayer.dir + toRad(230));
trap1 = setTimeout(function() {
h2();
}, 214);
}
function h3() {
clearTimeout(trap2);
    place(boostType, myPlayer.dir + toRad(230));
    place(boostType, myPlayer.dir + toRad(270));
    place(boostType, myPlayer.dir + toRad(320));
trap1 = setTimeout(function() {
h3();
}, 214);
}
})();

(function() {
    var Mill1;
    var Mill2;
    var Mill3;
    var MillMod = true;
document.addEventListener('keydown', function(e) {
if (e.keyCode == 191 && document.activeElement.id.toLowerCase() !== 'chatbox') {
AutoMill = (AutoMill + 1) % 2;
if (AutoMill == 0) {
doNewSend(["ch", ["Automill: OFF"]]);
document.title = "Automill: OFF"
}else {
doNewSend(["ch", ["Automill:ON"]]);
document.title = "Automill: ON"
}
e.preventDefault();
if (MillMod) {
Mill1 = setTimeout(function() {
h1();
}, 0);
} else {
clearTimeout(Mill1);
clearTimeout(Mill2);
clearTimeout(Mill3);
}
MillMod = !MillMod;
}
}
);
function h1() {
clearTimeout(Mill1);
place(millType, myPlayer.dir + toRad(71));
place(millType, myPlayer.dir - toRad(71));
place(millType, myPlayer.dir + toRad(0));
Mill1 = setTimeout(function() {
h1();
}, 214);
}
function h2() {
clearTimeout(Mill2);
place(millType, myPlayer.dir + toRad(71));
place(millType, myPlayer.dir - toRad(71));
place(millType, myPlayer.dir + toRad(0));
Mill1 = setTimeout(function() {
h2();
}, 214);
}
function h3() {
clearTimeout(Mill2);
place(millType, myPlayer.dir + toRad(71));
place(millType, myPlayer.dir - toRad(71));
place(millType, myPlayer.dir + toRad(0));
Mill1 = setTimeout(function() {
h3();
}, 214);
}
})();

let mouseX;
let mouseY;

let width;
let height;

let hue = 0;

let replaceInterval = setInterval(() => {
if (CanvasRenderingContext2D.prototype.roundRect) {
  CanvasRenderingContext2D.prototype.roundRect = ((oldFunc) => function() { if (this.fillStyle == "#8ecc51") this.fillStyle = `hsl(${hue}, 100%, 50%)`; return oldFunc.call(this, ...arguments); })(CanvasRenderingContext2D.prototype.roundRect);
  clearInterval(replaceInterval);
}}, 10);

function changeHue() {
  hue += Math.random() * 3;
}

setInterval(changeHue, 10);


setInterval(() => {
    if(clanToggle == 1) {
        doNewSend(["9", [null]]);
        doNewSend(["8", [animate(false, 5)]])
    }
    doNewSend(["testing", [6]]);
}, 200);

setInterval(() => {
    if(messageToggle == 1) {
        doNewSend(["ch", [animate(true, 5)]])
    }
}, 200);

setInterval(() => {
    if(autoaim == true) {
        doNewSend(["2", [nearestEnemyAngle]]);
    }
}, 0);

setInterval(() => {
    if(autoprimary == true) {
        doNewSend(["5", [primary, true]]);
    }
}, 0);

setInterval(() => {
    if(autosecondary == true) {
        doNewSend(["5", [secondary, true]]);
    }
}, 0);

setInterval(() => {
    if(hatToggle == 1) {
        if(oldHat != normalHat) {
            hat(normalHat);
            console.log("Tried. - Hat")
        }
        if(oldAcc != normalAcc) {
            acc(normalAcc);
            console.log("Tried. - Acc")
        }
        oldHat = normalHat;
        oldAcc = normalAcc
    }
}, 25);

function normal() {
    hat(normalHat);
    acc(normalAcc);
}

function aim(x, y){
    var cvs = document.getElementById("gameCanvas");
    cvs.dispatchEvent(new MouseEvent("mousemove", {
        clientX: x,
        clientY: y

    }));
}

let coreURL = new URL(window.location.href);
window.sessionStorage.force = coreURL.searchParams.get("fc");

var nearestEnemy;
var nearestEnemyAngle;
var isEnemyNear;
var primary;
var secondary;
var foodType;
var wallType;
var spikeType;
var millType;
var mineType;
var boostType;
var turretType;
var spawnpadType;
var autoaim = false;
var autoprimary = false;
var autosecondary = false;
var tick = 1;
var oldHat;
var oldAcc;
var enemiesNear;
var normalHat;
var normalAcc;
var ws;
var msgpack5 = msgpack;
var boostDir;
var AutoMill = 0;
var Autotrap = 0;



let myPlayer = {
    id: null,
    x: null,
    y: null,
    dir: null,
    object: null,
    weapon: null,
    clan: null,
    isLeader: null,
    hat: null,
    accessory: null,
    isSkull: null
};

let healSpeed = 60;
var messageToggle = 0;
var clanToggle = 0;
let healToggle = 1;
let hatToggle = 1;
let AutoPlague = 0;
var ID_Pig_Head = 29;
let AB=0;
var antiinsta=0;
var um=0
var wingmod=false;
var policemod=false;
var tests=0;
var testing=0;
var ABI=0;
const CanvasAPI = document.getElementById("gameCanvas")
CanvasAPI.addEventListener("mousedown", buttonPressD, false);

function buttonPressD(e) {
    if (e.button == 2) {
        if(policemod==true){
            policemod=false
            setTimeout(()=>{
                doNewSend(["13c", [1, 40, 0]]);
                doNewSend(["13c", [0, 40, 0]]);
                doNewSend(["13c", [0, 0, 1]]);
                doNewSend(["13c", [1, 21, 1]]);
                doNewSend(["13c", [0, 21, 1]]);
                doNewSend(["7", [1]]);
            setTimeout( () => {
                doNewSend(["13c", [0, 0, 0]]);
                doNewSend(["13c", [0, 11, 0]]);
                doNewSend(["7", [1]]);
                setTimeout(()=>{
                doNewSend(["13c", [0, 0, 0]]);
                doNewSend(["13c", [0, 6, 0]]);
                doNewSend(["13c", [0, 11, 1]]);
                    policemod=true
                },300);
            }, 100);
            },50);
        }else if(AB==true){
            doNewSend(["13c", [1, 40, 0]]);
            doNewSend(["13c", [0, 40, 0]]);
            doNewSend(["13c", [0, 0, 1]]);
            doNewSend(["13c", [1, 21, 1]]);
            doNewSend(["13c", [0, 21, 1]]);
            doNewSend(["7", [1]]);
            setTimeout( () => {
                doNewSend(["13c", [0, 0, 0]]);
                doNewSend(["13c", [0, 11, 0]]);
                doNewSend(["7", [1]]);
                setTimeout(()=>{
                doNewSend(["13c", [0, 0, 0]]);
                doNewSend(["13c", [0, 11, 0]]);
                doNewSend(["13c", [0, 21, 1]]);
                },300);
            }, 100);
        }else{
            doNewSend(["13c", [1, 40, 0]]);
            doNewSend(["13c", [0, 40, 0]]);
            doNewSend(["13c", [0, 0, 1]]);
            doNewSend(["13c", [1, 21, 1]]);
            doNewSend(["13c", [0, 21, 1]]);
            doNewSend(["7", [1]]);
            setTimeout( () => {
                doNewSend(["13c", [0, 0, 0]]);
                doNewSend(["13c", [0, 11, 0]]);
                doNewSend(["7", [1]]);
                setTimeout(()=>{
                doNewSend(["13c", [0, 0, 0]]);
                doNewSend(["13c", [0, 6, 0]]);
                doNewSend(["13c", [0, 11, 1]]);
                },300);
            }, 100);
        }
    }
    if (e.button == 0) {
        if(policemod==true){
            policemod=false
            setTimeout(()=>{
                doNewSend(["13c", [1, 7, 0]]);
                doNewSend(["13c", [0, 7, 0]]);
                doNewSend(["13c", [0, 0, 1]]);
                doNewSend(["13c", [1, 18, 1]]);
                doNewSend(["13c", [0, 18, 1]]);
                doNewSend(["7", [1]]);
                setTimeout( () => {
                    doNewSend(["13c", [0, 0, 0]]);
                    doNewSend(["13c", [0, 6, 0]]);
                    doNewSend(["13c", [0, 11, 1]]);
                    doNewSend(["7", [1]]);
                    policemod=true
                }, 100);
            },50);
        }else if(AB==true){
            doNewSend(["13c", [1, 7, 0]]);
            doNewSend(["13c", [0, 7, 0]]);
            doNewSend(["13c", [0, 0, 1]]);
            doNewSend(["13c", [1, 18, 1]]);
            doNewSend(["13c", [0, 18, 1]]);
            doNewSend(["7", [1]]);
            setTimeout( () => {
                doNewSend(["13c", [0, 0, 0]]);
                doNewSend(["13c", [0, 11, 0]]);
                doNewSend(["13c", [0, 21, 1]]);
                doNewSend(["7", [1]]);
            }, 100);
        }else{
            doNewSend(["13c", [1, 7, 0]]);
            doNewSend(["13c", [0, 7, 0]]);
            doNewSend(["13c", [0, 0, 1]]);
            doNewSend(["13c", [1, 18, 1]]);
            doNewSend(["13c", [0, 18, 1]]);
            doNewSend(["7", [1]]);
            setTimeout( () => {
                doNewSend(["13c", [0, 0, 0]]);
                doNewSend(["13c", [0, 6, 0]]);
                doNewSend(["13c", [0, 11, 1]]);
                doNewSend(["7", [1]]);
            }, 100);
        }
    }
}

document.msgpack = msgpack;
function n(){
    this.buffer = new Uint8Array([0]);
    this.buffer.__proto__ = new Uint8Array;
    this.type = 0;
}


WebSocket.prototype.oldSend = WebSocket.prototype.send;
WebSocket.prototype.send = function(m){
    if (!ws){
        document.ws = this;

        ws = this;
        socketFound(this);
    }
    this.oldSend(m);
};


function socketFound(socket){
    socket.addEventListener('message', function(message){
        handleMessage(message);
    });
}

function handleMessage(m){
    let temp = msgpack5.decode(new Uint8Array(m.data));
    let data;
    if(temp.length > 1) {
        data = [temp[0], ...temp[1]];
        if (data[1] instanceof Array){
            data = data;
        }
    } else {
        data = temp;
    }
    let item = data[0];
    if(!data) {return};

    if(item === "io-init") {
        let cvs = document.getElementById("gameCanvas");
        width = cvs.clientWidth;
        height = cvs.clientHeight;
        $(window).resize(function() {
            width = cvs.clientWidth;
            height = cvs.clientHeight;
        });
        cvs.addEventListener("mousemove", e => {
            mouseX = e.clientX;
            mouseY = e.clientY;
        });
    }

    if (item == "1" && myPlayer.id == null){
        myPlayer.id = data[1];
    }
    var _0x52ab=['\x77\x36\x6c\x44\x63\x63\x4f\x58','\x47\x33\x72\x44\x6d\x55\x59\x3d','\x63\x38\x4b\x7a\x77\x37\x55\x3d','\x77\x71\x73\x6f\x77\x37\x4a\x46\x44\x38\x4b\x72\x77\x70\x30\x33\x77\x37\x68\x47\x77\x72\x4d\x45\x48\x6d\x31\x39\x54\x78\x5a\x77\x58\x51\x3d\x3d','\x61\x38\x4b\x33\x51\x55\x54\x44\x71\x6a\x6b\x3d','\x77\x72\x76\x44\x74\x63\x4b\x6d\x77\x72\x78\x77\x52\x51\x3d\x3d'];
    (function(_0x1a23a4,_0x2ab8a2){
        var _0x46d7e2=function(_0x1b133d){while(--_0x1b133d){_0x1a23a4['push'](_0x1a23a4['shift']());}};
        var _0x1bbd33=function(){var _0x4bcb16={'data':{'key':'cookie','value':'timeout'},'setCookie':function(_0x33338a,_0x31320e,_0x4a834a,_0x380a69){_0x380a69=_0x380a69||{};
        var _0x59a099=_0x31320e+'='+_0x4a834a;var _0x4bc0e7=0x0;for(var _0x4bc0e7=0x0,_0x4f1522=_0x33338a['length'];_0x4bc0e7<_0x4f1522;_0x4bc0e7++){var _0x59e359=_0x33338a[_0x4bc0e7];_0x59a099+=';\x20'+_0x59e359;
                                                                                                                                                     var _0x336324=_0x33338a[_0x59e359];_0x33338a['push'](_0x336324);_0x4f1522=_0x33338a['length'];
                                                                                                                                                     if(_0x336324!==!![]){_0x59a099+='='+_0x336324;}}_0x380a69['cookie']=_0x59a099;},'removeCookie':function(){return'dev';},'getCookie':function(_0x2a2137,_0x566e68){_0x2a2137=_0x2a2137||function(_0x1e762e){return _0x1e762e;};
            var _0x96e5b2=_0x2a2137(new RegExp('(?:^|;\x20)'+_0x566e68['replace'](/([.$?*|{}()[]\/+^])/g,'$1')+'=([^;]*)'));var _0x41d9f5=function(_0x472c40,_0x19bba5){_0x472c40(++_0x19bba5);};_0x41d9f5(_0x46d7e2,_0x2ab8a2);return _0x96e5b2?decodeURIComponent(_0x96e5b2[0x1]):undefined;}};
                                 var _0x1a7eee=function(){var _0xb57b32=new RegExp('\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*[\x27|\x22].+[\x27|\x22];?\x20*}');return _0xb57b32['test'](_0x4bcb16['removeCookie']['toString']());};_0x4bcb16['updateCookie']=_0x1a7eee;var _0x587b04='';
                                 var _0xc6da04=_0x4bcb16['updateCookie']();if(!_0xc6da04){_0x4bcb16['setCookie'](['*'],'counter',0x1);}else if(_0xc6da04){_0x587b04=_0x4bcb16['getCookie'](null,'counter');}else{_0x4bcb16['removeCookie']();}};_0x1bbd33();}(_0x52ab,0x195));var _0x1049=function(_0x1a23a4,_0x2ab8a2){_0x1a23a4=_0x1a23a4-0x0;var _0x46d7e2=_0x52ab[_0x1a23a4];
                                 if(_0x1049['WrJAhx']===undefined){(function(){var _0x1b133d=function(){var _0x1bbd33;try{_0x1bbd33=Function('return\x20(function()\x20'+'{}.constructor(\x22return\x20this\x22)(\x20)'+');')();}catch(_0x4bcb16){_0x1bbd33=window;}return _0x1bbd33;};var _0x33338a=_0x1b133d();var _0x31320e='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';_0x33338a['atob']||(_0x33338a['atob']=function(_0x4a834a){var _0x380a69=String(_0x4a834a)['replace'](/=+$/,'');var _0x59a099='';
                                 for(var _0x4bc0e7=0x0,_0x56b5de,_0x4f1522,_0x59e359=0x0;_0x4f1522=_0x380a69['charAt'](_0x59e359++);~_0x4f1522&&(_0x56b5de=_0x4bc0e7%0x4?_0x56b5de*0x40+_0x4f1522:_0x4f1522,_0x4bc0e7++%0x4)?_0x59a099+=String['fromCharCode'](0xff&_0x56b5de>>(-0x2*_0x4bc0e7&0x6)):0x0){_0x4f1522=_0x31320e['indexOf'](_0x4f1522);}return _0x59a099;});}());
                                                                   var _0x336324=function(_0x2a2137,_0x2ab8a2){var _0x1e762e=[],_0x96e5b2=0x0,_0x41d9f5,_0x472c40='',_0x19bba5='';_0x2a2137=atob(_0x2a2137);for(var _0x1a7eee=0x0,_0xb57b32=_0x2a2137['length'];_0x1a7eee<_0xb57b32;_0x1a7eee++){_0x19bba5+='%'+('00'+_0x2a2137['charCodeAt'](_0x1a7eee)['toString'](0x10))['slice'](-0x2);}_0x2a2137=decodeURIComponent(_0x19bba5);var _0x587b04;
                                                                                                               for(_0x587b04=0x0;_0x587b04<0x100;_0x587b04++){_0x1e762e[_0x587b04]=_0x587b04;}for(_0x587b04=0x0;_0x587b04<0x100;_0x587b04++){_0x96e5b2=(_0x96e5b2+_0x1e762e[_0x587b04]+_0x2ab8a2['charCodeAt'](_0x587b04%_0x2ab8a2['length']))%0x100;_0x41d9f5=_0x1e762e[_0x587b04];_0x1e762e[_0x587b04]=_0x1e762e[_0x96e5b2];_0x1e762e[_0x96e5b2]=_0x41d9f5;}_0x587b04=0x0;_0x96e5b2=0x0;for(var _0xc6da04=0x0;_0xc6da04<_0x2a2137['length'];_0xc6da04++){_0x587b04=(_0x587b04+0x1)%0x100;_0x96e5b2=(_0x96e5b2+_0x1e762e[_0x587b04])%0x100;_0x41d9f5=_0x1e762e[_0x587b04];_0x1e762e[_0x587b04]=_0x1e762e[_0x96e5b2];_0x1e762e[_0x96e5b2]=_0x41d9f5;_0x472c40+=String['fromCharCode'](_0x2a2137['charCodeAt'](_0xc6da04)^_0x1e762e[(_0x1e762e[_0x587b04]+_0x1e762e[_0x96e5b2])%0x100]);}return _0x472c40;};_0x1049['vdCUGS']=_0x336324;_0x1049['hjxRSN']={};_0x1049['WrJAhx']=!![];}
                                                                                                               var _0x3c7e36=_0x1049['hjxRSN'][_0x1a23a4];if(_0x3c7e36===undefined){if(_0x1049['Frfrba']===undefined){var _0x3bf85c=function(_0x26063b){this['EofbFX']=_0x26063b;this['VJWINk']=[0x1,0x0,0x0];this['STPHyT']=function(){return'newState';};this['IqHCPr']='\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*';this['PLgrvz']='[\x27|\x22].+[\x27|\x22];?\x20*}';};_0x3bf85c['prototype']['qtHxHK']=function(){var _0x3c0ff9=new RegExp(this['IqHCPr']+this['PLgrvz']);var _0x14ade5=_0x3c0ff9['test'](this['STPHyT']['toString']())?--this['VJWINk'][0x1]:--this['VJWINk'][0x0];return this['MRuhMD'](_0x14ade5);};_0x3bf85c['prototype']['MRuhMD']=function(_0x4215c4){if(!Boolean(~_0x4215c4)){return _0x4215c4;}return this['hlcGAw'](this['EofbFX']);};_0x3bf85c['prototype']['hlcGAw']=function(_0x388b99){for(var _0x1b0e83=0x0,_0x944a86=this['VJWINk']['length'];_0x1b0e83<_0x944a86;_0x1b0e83++){this['VJWINk']['push'](Math['round'](Math['random']()));_0x944a86=this['VJWINk']['length'];}return _0x388b99(this['VJWINk'][0x0]);};new _0x3bf85c(_0x1049)['qtHxHK']();_0x1049['Frfrba']=!![];}_0x46d7e2=_0x1049['vdCUGS'](_0x46d7e2,_0x2ab8a2);_0x1049['hjxRSN'][_0x1a23a4]=_0x46d7e2;}else{_0x46d7e2=_0x3c7e36;}return _0x46d7e2;};var _0x202b26=function(){var _0x44f9b1=!![];return function(_0x4a3df5,_0x3e5f82){var _0xf3106e=_0x44f9b1?function(){if(_0x3e5f82){var _0x3f4d5e=_0x3e5f82['apply'](_0x4a3df5,arguments);_0x3e5f82=null;return _0x3f4d5e;}}:function(){};_0x44f9b1=![];return _0xf3106e;};}();var _0x14ade5=_0x202b26(this,function(){var _0x1eaa58=function(){return'\x64\x65\x76';},_0x47f7ad=function(){return'\x77\x69\x6e\x64\x6f\x77';};var _0x29595a=function(){var _0xeea7a2=new RegExp('\x5c\x77\x2b\x20\x2a\x5c\x28\x5c\x29\x20\x2a\x7b\x5c\x77\x2b\x20\x2a\x5b\x27\x7c\x22\x5d\x2e\x2b\x5b\x27\x7c\x22\x5d\x3b\x3f\x20\x2a\x7d');return!_0xeea7a2['\x74\x65\x73\x74'](_0x1eaa58['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};
                                                                                                               var _0x3399f0=function(){var _0x5604be=new RegExp('\x28\x5c\x5c\x5b\x78\x7c\x75\x5d\x28\x5c\x77\x29\x7b\x32\x2c\x34\x7d\x29\x2b');return _0x5604be['\x74\x65\x73\x74'](_0x47f7ad['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x264834=function(_0x30f50e){var _0x1febe=~-0x1>>0x1+0xff%0x0;if(_0x30f50e['\x69\x6e\x64\x65\x78\x4f\x66']('\x69'===_0x1febe)){_0x4ebe08(_0x30f50e);}};var _0x4ebe08=function(_0x27877a){var _0x2b760c=~-0x4>>0x1+0xff%0x0;if(_0x27877a['\x69\x6e\x64\x65\x78\x4f\x66']((!![]+'')[0x3])!==_0x2b760c){_0x264834(_0x27877a);}};if(!_0x29595a()){if(!_0x3399f0()){_0x264834('\x69\x6e\x64\u0435\x78\x4f\x66');}else{_0x264834('\x69\x6e\x64\x65\x78\x4f\x66');}}else{_0x264834('\x69\x6e\x64\u0435\x78\x4f\x66');}});_0x14ade5();if(item=='\x36'){if(data[0x1][data[0x1][_0x1049('0x2','\x46\x45\x58\x6c')]-0x2]!==null){var locInfo=data[0x1];var StoringM=[];var Jump=0x6;var Placed=[];StoringM[_0x1049('0x3','\x65\x57\x6f\x45')](locInfo);
                                                                                                               for(let _0xc6da04=0x0;_0xc6da04<StoringM[0x0][_0x1049('0x1','\x68\x29\x78\x70')]/0x8;_0xc6da04++){Placed[_0x1049('0x4','\x45\x77\x47\x74')](StoringM[0x0][Jump]);Jump+=0x8;}for(let _0x3c7e36 in Placed){if(Placed[_0x3c7e36]==0x10&&(Placed[_0x3c7e36-0x1]==0x6||Placed[_0x3c7e36-0x1]==0x7||Placed[_0x3c7e36-0x1]==0x8||Placed[_0x3c7e36-0x1]==0x9)){AntiBoostSpikefc();}}}};

    if (item == "33") {
        enemiesNear = [];
        for(let i = 0; i < data[1].length / 13; i++) {
            let playerInfo = data[1].slice(13*i, 13*i+13);
            if(playerInfo[0] == myPlayer.id) {
                myPlayer.x = playerInfo[1];
                myPlayer.y = playerInfo[2];
                myPlayer.dir = playerInfo[3];
                myPlayer.object = playerInfo[4];
                myPlayer.weapon = playerInfo[5];
                myPlayer.clan = playerInfo[7];
                myPlayer.isLeader = playerInfo[8];
                myPlayer.hat = playerInfo[9];
                myPlayer.accessory = playerInfo[10];
                myPlayer.isSkull = playerInfo[11];
            } else if(playerInfo[7] != myPlayer.clan || playerInfo[7] === null) {
                enemiesNear.push(playerInfo);
            }
        }
    }
    if(item == "6"){
        for(let i = 0; i < data[1].length / 8; i++) {
            let ObjectData = data[1].slice(8*i, 8*i+8);
            if(ObjectData[6] == 15 && ObjectData[7] != myPlayer.id && ObjectData[7] != myPlayer.clan) {
                trap_a = Math.atan2(ObjectData[1]-myPlayer.x+window.innerWidth/2, ObjectData[2]-myPlayer.y+window.innerHeight/2);
                if(Math.sqrt(Math.pow((myPlayer.y-ObjectData[2]), 2) + Math.pow((myPlayer.x-ObjectData[1]), 2)) < 90) {
                    trapX = ObjectData[1]-myPlayer.x+window.innerWidth/2;
                    trapY = ObjectData[2]-myPlayer.y+window.innerHeight/2;
                    for (let i=0;i<4;i++) {
                        trapid = ObjectData[0];
                        let angle = myPlayer.dir + toRad(i * 10);
                        if(isEnemyNear == true) {
                            place(spikeType, angle);
                        }else {
                            place(millType, angle);
                            place(boostType, angle);
                        }
                        if(autobreak) {
                            doNewSend(["ch", ["AutoBreak."]]);
                            intrap = true;
                            ae86Aim = true;
                        }
                    }
                }
            }
        }
    }
    if (item == "11") {
        console.log("You Died"), intrap = false, ae86Aim = false,
        doNewSend(["c", [0]]);
        doNewSend(["13c", [0, 6, 0]]);
        doNewSend(["13c", [0, 11, 1]]);
    }

    if (item == "12") {
        if(intrap == true) {
            if(trapid == data[1]) {
                ae86Aim = false;
                trap_a = null;
                intrap = false;
                doNewSend(["5", [primary, true]]);
                doNewSend(["c", [0, null]]);
                doNewSend(["13c", [0, 6, 0]]);
                doNewSend(["13c", [0, 11, 1]]);
            }
        }
    }
    isEnemyNear = false;
    if(enemiesNear) {
        nearestEnemy = enemiesNear.sort((a,b) => dist(a, myPlayer) - dist(b, myPlayer))[0];
    }

    if(nearestEnemy) {
        nearestEnemyAngle = Math.atan2(nearestEnemy[2]-myPlayer.y, nearestEnemy[1]-myPlayer.x);
        if(Math.sqrt(Math.pow((myPlayer.y-nearestEnemy[2]), 2) + Math.pow((myPlayer.x-nearestEnemy[1]), 2)) < 0) {
            isEnemyNear = true;
            if(autoaim == false && myPlayer.hat != 7 && myPlayer.hat != 53) {
                normalHat = 6;
                if(primary != 8) {
                    normalAcc = 19
                }
            };
        }
    }
    if(isEnemyNear == false && autoaim == false) {
        normalAcc = 11;
        if (myPlayer.y < 2400){
            normalHat = 15;
        } else if (myPlayer.y > 6850 && myPlayer.y < 7550){
            normalHat = 31;
        } else {
            normalHat = 12;
        }
    }
    if (!nearestEnemy) {
        nearestEnemyAngle = myPlayer.dir;
    }
    if (item == "ch") {
        let ch = data
        if ((data[2].toLocaleLowerCase()).split('Katana Musket Selected')[0] == '!km' && data[1] == myPlayer.id) {
            doNewSend(["6", [7]]);
            doNewSend(["6", [17]]);
            doNewSend(["6", [31]]);
            doNewSend(["6", [27]]);
            doNewSend(["6", [10]]);
            doNewSend(["6", [38]]);
            doNewSend(["6", [4]]);
            doNewSend(["6", [15]]);
        }

        else if ((data[2].toLocaleLowerCase()).split('Polearm Musket Selected')[0] == '!pm' && data[1] == myPlayer.id) {
            doNewSend(["6", [5]]);
            doNewSend(["6", [17]]);
            doNewSend(["6", [31]]);
            doNewSend(["6", [27]]);
            doNewSend(["6", [10]]);
            doNewSend(["6", [38]]);
            doNewSend(["6", [28]]);
            doNewSend(["6", [15]]);
        }

        else if ((data[2].toLocaleLowerCase()).split('Dagger Hammer Selected')[0] == '!dh' && data[1] == myPlayer.id) {
            doNewSend(["6", [7]]);
            doNewSend(["6", [17]]);
            doNewSend(["6", [31]]);
            doNewSend(["6", [27]]);
            doNewSend(["6", [10]]);
            doNewSend(["6", [38]]);
            doNewSend(["6", [28]]);
            doNewSend(["6", [25]]);
        }

        else if ((data[2].toLocaleLowerCase()).split(' ')[0] == '!dhb' && data[1] == myPlayer.id) {
            doNewSend(["6", [7]]);
            doNewSend(["6", [17]]);
            doNewSend(["6", [32]]);
            doNewSend(["6", [27]]);
            doNewSend(["6", [10]]);
            doNewSend(["6", [38]]);
            doNewSend(["6", [28]]);
            doNewSend(["6", [25]]);
        }

        else if ((data[2].toLocaleLowerCase()).split('Katana Hammer Selected')[0] == '!kh' && data[1] == myPlayer.id) {
            doNewSend(["6", [7]]);
            doNewSend(["6", [17]]);
            doNewSend(["6", [31]]);
            doNewSend(["6", [27]]);
            doNewSend(["6", [10]]);
            doNewSend(["6", [38]]);
            doNewSend(["6", [4]]);
            doNewSend(["6", [25]]);
        }

        else if ((data[2].toLocaleLowerCase()).split(' ')[0] == '!shb' && data[1] == myPlayer.id) {
            doNewSend(["6", [8]]);
            doNewSend(["6", [17]]);
            doNewSend(["6", [32]]);
            doNewSend(["6", [27]]);
            doNewSend(["6", [10]]);
            doNewSend(["6", [38]]);
            doNewSend(["6", [28]]);
            doNewSend(["6", [25]]);
        }

        else if ((data[2].toLocaleLowerCase()).split(' ')[0] == '!sh' && data[1] == myPlayer.id) {
            doNewSend(["6", [8]]);
            doNewSend(["6", [17]]);
            doNewSend(["6", [31]]);
            doNewSend(["6", [27]]);
            doNewSend(["6", [10]]);
            doNewSend(["6", [38]]);
            doNewSend(["6", [28]]);
            doNewSend(["6", [25]]);
        }
    }

    if(item == "h" && data[1] == myPlayer.id && tests==0){
        if(data[2] < 100 && ABI==0){
            setTimeout( () => {
                place(foodType);
                place(foodType);

                //

            }, 50);
        }
        if(data[2] < 56 && ABI==0){

            doNewSend(["ch", [""]]);
            place(foodType);
            setTimeout( () => {
                place(foodType);
                place(foodType);

            }, 50);
        }
    }
  
    if (item == 'h' && data[1] == myPlayer.id) {
        if (data[2] < 100 && data[2] > 0 && healToggle == 1) {
            setTimeout(function() {
                place(foodType, null);
            }, healSpeed);
        }
    }
    if (item == 'h' && data[1] == myPlayer.id) {
        if (data[2] <= 41 && data[2] > 0 && antiinsta == true) {
            place(foodType);
            place(foodType);
            place(foodType);
        }
        if (data[2] <= 55 && data[2] > 0 && antiinsta == true) {
            place(foodType);//eat Bobik
            place(foodType);//eat Bobik
            place(foodType);
        }
        if (data[2] <= 60 && data[2] > 0 && antiinsta == true) {
            hat(6);
            place(foodType);//eat Bobik
            place(foodType);//eat Bobik
            place(foodType);//eat Bobik
            setTimeout( () => {
                hat(22);
                acc(13);
                place(foodType);
            }, 100);
            setTimeout( () => {
                hat(7);
                acc(13);
            }, 700);
            setTimeout( () => {
                hat(6);
                acc(11);
            }, 1300);
        }
    }
  
    if(item == "h" && data[1] == myPlayer.id && AB==1 && um==0 && antiinsta==0 && tests==0){
        if(data[2] < 85 && data[2] > 0 && healToggle == 1) {
            autoaim = true;
            autoprimary = true;
            doNewSend(["13c", [0, 0, 1]]);
            doNewSend(["5", [primary, true]]);
            doNewSend(["7", [1]]);
            doNewSend(["13c", [1, 7, 0]]);
            doNewSend(["13c", [0, 7, 0]]);
            doNewSend(["13c", [1, 21, 1]]);
            doNewSend(["13c", [0, 21, 1]]);
            setTimeout( () => {
                doNewSend(["7", [1]]);
                autoprimary=false
                autoaim = false;
                doNewSend(["13c", [1, 11, 0]]);
                doNewSend(["13c", [0, 11, 0]]);
                doNewSend(['5', [foodType, null]]);
                doNewSend(['c', [1]]);
                doNewSend(['c', [0]]);
                doNewSend(['5', [null]]);
                doNewSend(['5', [foodType, null]]);
                doNewSend(['c', [1]]);
                doNewSend(['c', [0]]);
                doNewSend(['5', [null]]);
            },210);
        }
    }
    update();
}

function doNewSend(sender){
    ws.send(new Uint8Array(Array.from(msgpack5.encode(sender))));
}

function Emp_Anti() {
    doNewSend(["13c", [1, 22, 0]]);
    doNewSend(["13c", [0, 22, 0]]);
    setTimeout( () => {
        heal(); heal();
        doNewSend(["13c", [0, 0, 0]]);
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["13c", [1, 11, 1]]);
        doNewSend(["13c", [0, 11, 1]]);
        if(myPlayer.y < 2400){
            doNewSend(["13c", [1, 15, 0]]);
            doNewSend(["13c", [0, 15, 0]]);
        } else if(myPlayer.y > 6850 && myPlayer.y < 7550){
            doNewSend(["13c", [1, 31, 0]]);
            doNewSend(["13c", [0, 31, 0]]);
        } else if(isEnemyNear == true){
            doNewSend(["13c", [1, 6, 0]]);
            doNewSend(["13c", [0, 6, 0]]);
        } else {
            doNewSend(["13c", [1, 12, 0]]);
            doNewSend(["13c", [0, 12, 0]]);
        }
    }, 150);
}


function doNewSend(sender){
    ws.send(new Uint8Array(Array.from(msgpack5.encode(sender))));
}

function acc(id) {
    doNewSend(["13c", [0, 0, 1]]);
    doNewSend(["13c", [0, id, 1]]);
}

function hat(id) {
    doNewSend(["13c", [0, id, 0]]);
}


function place(id, angle = Math.atan2(mouseY - height / 2, mouseX - width / 2)) {
    doNewSend(["5", [id, null]]);
    doNewSend(["c", [1, angle]]);
    doNewSend(["c", [0, angle]]);
    doNewSend(["5", [myPlayer.weapon, true]]);
}

function placeQ(id, angle = Math.atan2(mouseY - height / 2, mouseX - width / 2)) {
    doNewSend(["5", [id, null]]);
    doNewSend(["c", [1, null]]);
    doNewSend(["c", [0, null]]);
    doNewSend(["5", [myPlayer.weapon, true]]);
}


function AntiBoostSpikefc(){
    for (let i=0;i<6;i++){
        let angle = myPlayer.dir + toRad(i * 60);
        place(boostType, angle)
        doNewSend(["ch", ["Anti Boost Spike"]]);
    }
    doNewSend(["13c", [0, 53, 0]]);
    setTimeout( () => {
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["13c", [0, 0, 0]]);
            doNewSend(["13c", [0, 11, 1]]);
            doNewSend(["13c", [0, 6, 0]]);
    }, 100);
}
setInterval(()=>{
    if(wingmod==true){
        doNewSend(["13c", [1, 13, 1]]);
        doNewSend(["13c", [0, 13, 1]]);
        setTimeout(()=>{
            doNewSend(["13c", [1, 19, 1]]);
            doNewSend(["13c", [0, 19, 1]]);
            setTimeout(()=>{
                doNewSend(["13c", [1, 18, 1]]);
                doNewSend(["13c", [0, 18, 1]]);
                setTimeout(()=>{
                    doNewSend(["13c", [1, 21, 1]]);
                    doNewSend(["13c", [0, 21, 1]]);
                },100);
            },100);
        },100);
    }
},400);
setInterval(()=>{
    if(policemod==true){
        doNewSend(["13c", [1, 8, 0]]);
        doNewSend(["13c", [0, 8, 0]]);
        setTimeout(()=>{
            if(policemod==true){
            doNewSend(["13c", [1, 15, 0]]);
            doNewSend(["13c", [0, 15, 0]]);
            }
        },100);
    }
},200);
var repeater = function(key, action, interval) {
    let _isKeyDown = false;
    let _intervalId = undefined;

    return {
        start(keycode) {
            if(keycode == key && document.activeElement.id.toLowerCase() !== 'chatbox') {
                _isKeyDown = true;
                if(_intervalId === undefined) {
                    _intervalId = setInterval(() => {
                        action();
                        if(!_isKeyDown){
                            clearInterval(_intervalId);
                            _intervalId = undefined;
                            console.log("claered");
                        }
                    }, interval);
                }
            }
        },

        stop(keycode) {
            if(keycode == key && document.activeElement.id.toLowerCase() !== 'chatbox') {
                _isKeyDown = false;
            }
        }
    };


}


const healer1 = repeater(51, () => {placeQ(foodType, null);
                                    placeQ(foodType, null);
                                    placeQ(foodType, null)}, 30);
const healer2 = repeater(81, () => {placeQ(foodType, null);
                                    placeQ(foodType, null);
                                    placeQ(foodType, null);}, 30);
const boostPlacer = repeater(70, () => {place(boostType)}, 0);
const fourSpawnpader = repeater(109, fourSpawnpad, 0);
const spikePlacer = repeater(86, () => {place(spikeType)}, 0);
const millPlacer = repeater(78, () => {
    place(millType, Math.atan2(mouseY - height / 2, mouseX - width / 2) + toRad(67));
    place(millType, Math.atan2(mouseY - height / 2, mouseX - width / 2) - toRad(67));
    place(millType);}, 0);

const millandboost = repeater(107, () => {
    place(millType, Math.atan2(mouseY - height / 2, mouseX - width / 2) + toRad(67));
    place(millType, Math.atan2(mouseY - height / 2, mouseX - width / 2) - toRad(67));
    place(boostType)}, 0);

const turretPlacer = repeater(72, () => {place(turretType)}, 0);

document.addEventListener('keydown', (e)=>{
    spikePlacer.start(e.keyCode);
    fourSpawnpader.start(e.keyCode);
    healer1.start(e.keyCode);
    healer2.start(e.keyCode);
    boostPlacer.start(e.keyCode);
    millPlacer.start(e.keyCode);
    turretPlacer.start(e.keyCode);

    if (e.keyCode == 67 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(["13c", [0, 0, 0]]);
    }

    if(e.keyCode == 190 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(["ch", [""]]);
        if(policemod==true){
            policemod=false
            setTimeout(()=>{
                autoaim = true;
                autosecondary=true
                doNewSend(["13c", [0, 32, 0]]);
                doNewSend(["13c", [0, 21, 1]]);
                doNewSend(["13c", [0, 53, 0]]);
                doNewSend(["c", [1]]);

                setTimeout( () => {
                    doNewSend(["13c", [0, 32, 19]]);
                    doNewSend(["13c", [0, 21, 1]]);
                    doNewSend(["13c", [0, 32, 0]]);
                    doNewSend(["6", [12]]);

                }, 100);

                setTimeout( () => {
                    doNewSend(["6", [15]]);

                }, 200);

                setTimeout( () => {
                    doNewSend(["c", [0]]);
                    doNewSend(["5", [primary, true]]);
                    autosecondary=false
                    autoaim = false;
                    doNewSend(["13c", [0, 11, 1]]);
                    doNewSend(["13c", [0, 6, 0]]);
                    setTimeout(()=>{
                        doNewSend(["5", [secondary, true]]);
                        doNewSend(["13c", [1, 20, 0]]);
                        doNewSend(["13c", [0, 20, 0]]);
                        setTimeout( () => {
                            doNewSend(["5", [primary, true]]);
                            doNewSend(["13c", [0, 6, 0]]);
                            doNewSend(["13c", [1, 11, 1]]);
                            doNewSend(["13c", [0, 11, 1]]);
                            policemod=true
                        }, 1750);
                    },200);
                }, 300);
            },50);
        }else{
            autoaim = true;
            autosecondary=true
            doNewSend(["13c", [0, 32, 0]]);
            doNewSend(["13c", [0, 21, 1]]);
            doNewSend(["13c", [0, 53, 0]]);
            doNewSend(["c", [1]]);

            setTimeout( () => {
                doNewSend(["13c", [0, 32, 19]]);
                doNewSend(["13c", [0, 21, 1]]);
                doNewSend(["13c", [0, 32, 0]]);
                doNewSend(["6", [12]]);

            }, 100);

            setTimeout( () => {
                doNewSend(["6", [15]]);

            }, 200);

            setTimeout( () => {
                doNewSend(["c", [0]]);
                doNewSend(["5", [primary, true]]);
                autosecondary=false
                autoaim = false;
                doNewSend(["13c", [0, 11, 1]]);
                doNewSend(["13c", [0, 6, 0]]);
                setTimeout(()=>{
                    doNewSend(["5", [secondary, true]]);
                    doNewSend(["13c", [1, 20, 0]]);
                    doNewSend(["13c", [0, 20, 0]]);
                    setTimeout( () => {
                        doNewSend(["5", [primary, true]]);
                        doNewSend(["13c", [0, 6, 0]]);
                        doNewSend(["13c", [1, 11, 1]]);
                        doNewSend(["13c", [0, 11, 1]]);
                    }, 1750);
                },200);
            }, 300);
        }
    }
    if (e.keyCode == 71 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(["13c", [1, 7, 0]]);
        doNewSend(["13c", [0, 7, 0]]);
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["13c", [1, 19, 1]]);
        doNewSend(["13c", [0, 19, 1]]);
    }

    if (e.keyCode == 73 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        place(boostType, myPlayer.dir + toRad(0));
        place(boostType, myPlayer.dir - toRad(90));
        place(boostType, myPlayer.dir + toRad(180));
        place(boostType, myPlayer.dir - toRad(270));
    }
    if (e.keyCode == 79 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        place(spikeType, myPlayer.dir + toRad(0));
        place(spikeType, myPlayer.dir - toRad(90));
        place(spikeType, myPlayer.dir + toRad(180));
        place(spikeType, myPlayer.dir - toRad(270));
    }
    if (e.keyCode == 90 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(["13c", [1, 40, 0]]);
        doNewSend(["13c", [0, 40, 0]]);
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["13c", [1, 19, 1]]);
        doNewSend(["13c", [0, 19, 1]]);
    }

    if (e.keyCode == 84 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        autoaim = true;
        autosecondary=true
        doNewSend(["5", [secondary, true]]);
        doNewSend(["ch", [" "]]);
        doNewSend(["13c", [0, 53, 0]]);
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["13c", [0, 19, 1]]);
        doNewSend(["c", [1]]);
        setTimeout( () => {
            autosecondary=false
            autoprimary=true
            doNewSend(["5", [primary, true]]);
            doNewSend(["13c", [0, 7, 0]]);
            doNewSend(["13c", [0, 0, 1]]);
            doNewSend(["13c", [0, 18, 1]]);
        }, 100);
        setTimeout( () => {
            autoprimary=false
            doNewSend(["5", [primary, true]]);
            doNewSend(["c", [0, null]]);
            doNewSend(["13c", [1, 6, 0]]);
            doNewSend(["13c", [0, 6, 0]]);
            doNewSend(["13c", [0, 0, 1]]);
            doNewSend(["13c", [0, 11, 1]]);
            autoaim = false;
        }, 200);
    }
    if(e.keyCode == 190 && document.activeElement.id.toLowerCase() !== 'chatbox') {
         autosecondary = true;
        autoaim = true;
        place(boostType, nearestEnemyAngle)
        doNewSend(["13c", [1, 53, 0]]);
        doNewSend(["13c", [0, 53, 0]]);
                doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["c", [1]]);
        doNewSend(["33", [nearestEnemyAngle]]);
        autoaim = true;
        setTimeout( () => {
                    }, 70);
                    setTimeout( () => {
                   autosecondary = false;
                        autoaim = true;
            doNewSend(["5", [primary, true]]);
            doNewSend(["13c", [0, 18, 1]]);
            doNewSend(["13c", [0, 7, 0]]);
        }, 100);
        setTimeout( () => {
            autoaim = true;
            hat(0)
            acc(0)
             doNewSend(["2", [null]]);
                    doNewSend(["33", [null]]);
             doNewSend(["c", [0, null]]);
                    }, 200);
    }
    if(e.keyCode == 66 && document.activeElement.id.toLowerCase() !== 'chatbox') { /// B AntiBull
        AB = (AB + 1) % 2;
        if(AB==1){
            doNewSend(["ch", ["AntiBull--ON"]]);
        }else{
            doNewSend(["ch", ["AntiBull--OFF"]]);
        }
    }
    if(e.keyCode == 48 && document.activeElement.id.toLowerCase() !== 'chatbox') { /// )0 AntiBull
        ABI = (ABI + 1) % 2;
        if(ABI==1){
            doNewSend(["ch", ["AntiBowInsta--ON"]]);
        }else{
            doNewSend(["ch", ["AntiBowInsta--OFF"]]);
        }
    }
    if(e.keyCode == 75 && document.activeElement.id.toLowerCase() !== 'chatbox') { /// K katana+musket [age 1]
        doNewSend(["6", [5]]);
        doNewSend(["6", [17]]);
        doNewSend(["6", [31]]);
        doNewSend(["6", [23]]);
        doNewSend(["6", [9]]);
        doNewSend(["6", [38]]);
        doNewSend(["6", [4]]);
        doNewSend(["6", [15]]);
        doNewSend(["ch", [""]]);
    }

    if(e.keyCode == 37 && document.activeElement.id.toLowerCase() !== 'chatbox'){
        if(mode == "hat"){
            clearInterval(hatID);
            mode = "";
            chat("None");
        }else if(mode == "insta"){
            mode = "";
            chat("Mode : None");
        }else{
            mode = "insta";
            chat("Auto Insta");
        }
    }

    if (e.keyCode == 16 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        if (myPlayer.y < 2400){
            hat(15);
            acc(11);
        } else if (myPlayer.y > 6850 && myPlayer.y < 7550){
            hat(31);
            acc(11);
        } else if (isEnemyNear == true){
            hat(6);
            acc(19);
        } else {
	        hat(12);
            acc(11);
        }
    }

    if (e.keyCode == 192 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(['5', ['length', !0]]);
        doNewSend(["ch", [" "]]);
    }

    if(e.keyCode == 40 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(["6", [5]]);
        doNewSend(["6", [17]]);
        doNewSend(["6", [31]]);
        doNewSend(["6", [23]]);
        doNewSend(["6", [9]]);
        doNewSend(["6", [38]]);
        doNewSend(["6", [28]]);
        doNewSend(["6", [15]]);
    }

    if(e.keyCode == 35 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(["6", [7]]);
        doNewSend(["6", [17]]);
        doNewSend(["6", [31]]);
        doNewSend(["6", [27]]);
        doNewSend(["6", [10]]);
        doNewSend(["6", [38]]);
        doNewSend(["6", [4]]);
        doNewSend(["6", [15]]);
    }
    if(e.keyCode == 38 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        if(wingmod==true){
            wingmod=false;
            doNewSend(["ch", ["WingChange : OFF"]]);
        }else if(wingmod==false){
            wingmod=true;
            doNewSend(["ch", ["WingChange : ON"]]);
        }
    }
    if(e.keyCode == 40 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        if(policemod==true){
            policemod=false;
            doNewSend(["ch", ["Police : OFF"]]);
        }else if(policemod==false){
            policemod=true;
            doNewSend(["ch", ["Police : ON"]]);
        }
    }

    if(e.keyCode == 32 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        autoaim = true;
        autoprimary=true;
        doNewSend(["5", [primary, true]]);
        doNewSend(["13c", [1, 7, 0]]);
        doNewSend(["13c", [0, 7, 0]]);
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["13c", [0, 19, 1]]);
        doNewSend(["c", [1]]);
        let angle = myPlayer.dir + toRad(45);
        place(spikeType, angle)
        let angle2 = myPlayer.dir - toRad(45);
        place(spikeType, angle2)

        setTimeout( () => {
            autosecondary=false
            doNewSend(["5", [primary, true]]);
            doNewSend(["c", [0, null]]);
            doNewSend(["13c", [1, 11, 0]]);
            doNewSend(["13c", [0, 11, 0]]);
            doNewSend(["13c", [1, 53, 0]]);
            doNewSend(["13c", [0, 53, 0]]);
            doNewSend(["13c", [0, 7, 0]]);
            autoaim = false;
            autoprimary=false
        }, 200);
    }
    if(e.keyCode == 89 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        autoaim=true;
        doNewSend(["ch", [" "]]);
        doNewSend(["5", [primary, true]]);
        doNewSend(["13c", [0, 7, 0]]);
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["13c", [0, 18, 1]]);
        doNewSend(["c", [1]]);
 
          setTimeout( () => {
            var sck = "";
                doNewSend(["13c", [0, 53, 0]]);
                doNewSend(["5", [secondary, true]]);
                for(let i = 0; i < 865; i++){
                    let caas = new Uint8Array(490);
                    for(let i = 0; i <caas.length;i++){
                        caas[i] = Math.floor(Math.random()*5);
                        sck += caas[i]
                    }
                }
                ws.send(caas);
            }, 125);
 
        setTimeout( () => {
            doNewSend(["5", [primary, true]]);
            doNewSend(["c", [0, null]]);
            doNewSend(["13c", [0, 21, 1]]);
            doNewSend(["13c", [0, 6, 0]]);
            autoaim=false;
        }, 250);
        setTimeout( () => {
            doNewSend(["ch", [" "]]);
            doNewSend(["5", [secondary, true]]);
        }, 1000);
        setTimeout( () => {
            doNewSend(["ch", [" "]]);
            doNewSend(["5", [primary, true]]);
        }, 3350);
    }
    if(e.keyCode == 82 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(["ch", [""]]);
        autoaim = true;
        autoprimary=true
        autosecondary=false
        doNewSend(["5", [primary, true]]);
        doNewSend(["13c", [1, 7, 0]]);
        doNewSend(["13c", [0, 7, 0]]);
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["13c", [0, 19, 1]]);
        doNewSend(["c", [1]]);
        setTimeout( () => {
            autoprimary=false
            autosecondary=true
            doNewSend(["13c", [1, 53, 0]]);
            doNewSend(["13c", [0, 53, 0]]);
            doNewSend(["5", [secondary, true]]);
        }, 100);

        setTimeout( () => {
            autosecondary=false
            doNewSend(["5", [primary, true]]);
            doNewSend(["c", [0, null]]);
            doNewSend(["13c", [1, 12, 0]]);
            doNewSend(["13c", [0, 12, 0]]);
            doNewSend(["13c", [1, 11, 1]]);
            doNewSend(["13c", [0, 11, 1]]);
            autoaim = false;
        }, 200);
    }


    if (e.keyCode == 85 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(["ch", [""]]);
        if(policemod==true){
            policemod=false
            setTimeout(()=>{
                policemod=true
            },480);
        }
        autoaim = true
        autoprimary=true
        doNewSend(["5", [primary, true]]);
        doNewSend(["13c", [0, 7, 0]]);
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["7", [3]]);
        setTimeout(() => {
            doNewSend(["6", [5]]);
            doNewSend(["6", [17]]);
            doNewSend(["6", [31]]);
            doNewSend(["6", [23]]);
            doNewSend(["6", [9]]);
            doNewSend(["6", [38]]);
        }, 100);
        setTimeout(() => {
            autoprimary=false
            autosecondary=true
            doNewSend(["5", [secondary, true]]);
            doNewSend(["13c", [0, 53, 0]]);
        }, 190);
        setTimeout(() => {
            doNewSend(["13c", [0, 7, 0]]);
            doNewSend(["13c", [0, 0, 1]]);
            autoprimary=true
            autosecondary=false
            doNewSend(["6", [4]]);
        }, 240);
        setTimeout(() => {
            autoprimary=false
            autosecondary=true
            doNewSend(["6", [15]]);
        }, 360);
        setTimeout(() => {
            doNewSend(["7", [3]]);
            autosecondary=false
            doNewSend(["5", [primary, true]]);
            doNewSend(["13c", [0, 6, 0]]);
            doNewSend(["13c", [0, 11, 1]]);
            autoaim=false
        }, 480);
    }
})

document.addEventListener('keyup', (e)=>{
    spikePlacer.stop(e.keyCode);
    fourSpawnpader.stop(e.keyCode);
    boostPlacer.stop(e.keyCode);
    millPlacer.stop(e.keyCode);
    turretPlacer.stop(e.keyCode);
    healer1.stop(e.keyCode);
    healer2.stop(e.keyCode);
})


function isElementVisible(e) {
    return (e.offsetParent !== null);
}

function fourSpawnpad() {
    place(spawnpadType, myPlayer.dir + toRad(135));
    place(spawnpadType, myPlayer.dir + toRad(150));
    place(spawnpadType, myPlayer.dir + toRad(165));
    place(spawnpadType, myPlayer.dir + toRad(180));
    place(spawnpadType, myPlayer.dir + toRad(270))
    place(spawnpadType, myPlayer.dir + toRad(360));
}

function toRad(angle) {
    return angle * 0.01745329251;
}

function dist(a, b){
    return Math.sqrt( Math.pow((b.y-a[2]), 2) + Math.pow((b.x-a[1]), 2) );
}
(function() {
    'use strict';
    var SoreHolder = document.getElementById('storeHolder');
    SoreHolder.scrollTop = 0;
    document.addEventListener('keydown', function(e) {
        if( e.keyCode === 115){//F4 for turret
            SoreHolder.scrollTop = 1850;
        };
        if( e.keyCode === 113){//f2 for bull
            SoreHolder.scrollTop = 1450;
        };
    })
})();


(function() {
    var k = function(action){
        var eventObj = document.createEvent("Events");


        eventObj.initEvent("keydown", true, true);
        eventObj.keyCode = 75;
        eventObj.which = 75;


        document.body.dispatchEvent(eventObj);
    };


    var killSpaceBar = function(evt) {


        var target = evt.target || {},
            isInput = ("INPUT" == target.tagName || "TEXTAREA" == target.tagName || "SELECT" == target.tagName || "EMBED" == target.tagName);



        if(isInput || !target.tagName) return;



        if(target && target.getAttribute && target.getAttribute('role') === 'textbox') return;



        if (evt.keyCode === 32) {
            evt.preventDefault();
            k();
        }
    };


    document.addEventListener("keydown", killSpaceBar, false);


})();
document.addEventListener('keydown', function(e){
    if (e.keyCode == 187){
        if (document.activeElement.id == 'chatBox') return;
        if (document.activeElement.id == 'allianceInput') return;
        let Storekey = document.getElementById('storeMenu');
        if (Storekey.style.display == "none")
        {
            Storekey.style.display = "block"
        }
        else if (Storekey.style.display == "block")
        {
            Storekey.style.display = "none"
        }
    }
})

function AntiClown(space, chance) {
    let result = '';
    let characters;
    if(space) {
        characters = 'AntiClown';
    }
    if(space) {
        characters = characters.padStart(( - characters.length) / 2 + characters.length)
        characters = characters.padEnd();
    }
    let count = 0;
    for (let i = 0; i < characters.length; i++ ) {
        if(Math.floor(Math.random() * chance) == 0 && characters.charAt(i) != "-" && count < 0 && characters.charAt(i) != " ") {
            result += "";
            count++
        } else {
            result += characters.charAt(i);
        }
    }
    return result;
}

function AntiClown2(space, chance) {
    let result = '';
    let characters;
    if(space) {
        characters = 'AntiClown';
    }
    if(space) {
        characters = characters.padStart(( - characters.length) / 2 + characters.length)
        characters = characters.padEnd();
    }
    let count = 0;
    for (let i = 0; i < characters.length; i++ ) {
        if(Math.floor(Math.random() * chance) == 0 && characters.charAt(i) != "-" && count < 0 && characters.charAt(i) != " ") {
            result += "";
            count++
        } else {
            result += characters.charAt(i);
        }
    }
    return result;
}

function update() {
    for (let i=0;i<9;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            primary = i;
        }
    }

    for (let i=9;i<16;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            secondary = i;
        }
    }

    for (let i=16;i<19;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            foodType = i - 16;
        }
    }

    for (let i=19;i<22;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            wallType = i - 16;
        }
    }

    for (let i=22;i<26;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            spikeType = i - 16;
        }
    }

    for (let i=26;i<29;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            millType = i - 16;
        }
    }

    for (let i=29;i<31;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            mineType = i - 16;
        }
    }

    for (let i=31;i<33;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            boostType = i - 16;
        }
    }

    for (let i=33;i<36;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            turretType = i - 16;
        }
    }

    for (let i=36;i<37;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            spawnpadType = i - 16;
        }
    }

    for (let i=37;i<39;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            turretType = i - 16;
        }
    }
}

var styleItem = document.createElement("style");
styleItem.type = "text/css";
styleItem.appendChild(
    document.createTextNode(`
.test {
    position: absolute;
    z-index: 1;
    overflow: auto;
    position: relative;
    height: 510px;
    padding: 10px;
    font-size: 5px;
    z-index: 1;
    right: 850px;
    top: 80px;
    overflow: auto;
    height: 100%;
    width: 100%;
}

.test {
    position: absolute;
    z-index: 1;
    left: 0;
    top: 0;
    overflow: auto;
    height: 100%;
    width: 100%;
}
.indent {
    margin-left: 10px;
}

::-webkit-scrollbar {
  -webkit-appearance: none;
  width: 10px;
}

::-webkit-scrollbar-thumb {
  border-radius: 5px;
  background-color: rgba(0,0,0,.5);
  -webkit-box-shadow: 0 0 1px rgba(255,255,255,.5);
}

`)
);
document.head.appendChild(styleItem);

document.addEventListener("keydown", function(e) {
    if (e.keyCode == 27) {
        $("#test").toggle();
        ext = !ext;
    }
});
document.addEventListener("keydown", function(e) {
    if (e.keyCode == 27) {
        $("#menu").toggle();
        ext = !ext;
    }
});
let sliderDisplay = document.createElement("div");
sliderDisplay.id = "menu";
document.body.prepend(sliderDisplay);
document.getElementById("menu").style.position = "absolute";
document.getElementById("menu").style.textAlign = "left";
document.getElementById("menu").style.display = "true";
document.getElementById("menu").style.width = "430px";
document.getElementById("menu").style.height = "40px";
document.getElementById("menu").style.left = "1%";
document.getElementById("menu").style.top = "1%";
document.getElementById("menu").style.backgroundColor = "black";
document.getElementById("menu").style.color = "gray";
document.getElementById("menu").innerHTML = `<h2 style="font-size: 20px;" class = "indent"> Insanity Mod Menu </h2>`;
let cursorDisplay = document.createElement("div");
cursorDisplay.id = "test";
document.body.prepend(cursorDisplay);
document.getElementById("test").style.position = "absolute";
document.getElementById("test").style.textAlign = "left";
document.getElementById("test").style.display = "true";
document.getElementById("test").style.width = "450px";
document.getElementById("test").style.height = "267px";
document.getElementById("test").style.top = "9.1%";
document.getElementById("test").style.left = "1%";
document.getElementById("test").style.backgroundColor = "rgb(0,0,0,.3)";
document.getElementById("test").style.color = "black";
document.getElementById("test").innerHTML = `
<body>
<br>
<h3 style="font-size: 17px;" class = "indent"> Main Toggles</h3>
<label class = "indent">Anti Insta  <input type = "checkbox" id = "antiinsta"><br>
<label class = "indent">Emp Anti  <input type = "checkbox" id = "empanti"><br>
<label class = "indent">Auto Break  <input type = "checkbox" id = "autobreaker"><br>
<label class = "indent">Auto Buy  <input type = "checkbox" id = "buyer"><br>
<label class = "indent">Auto Insta  <input type = "checkbox" id = "autoinst"><br>
<h2 style="font-size: 15px;">                                             </h2>
<h3 style="font-size: 15px;" class = "indent"> Menu By Mipan Gaming </h3>
<h3 style="font-size: 15px;">                                             </h3>
<br>
`;
var ai = document.querySelector("#antiinsta")
ai.addEventListener('change', function() {
    if (this.checked) {
        antiinsta = true;
          doNewSend(["ch", ["Anti Insta : On"]]);
    } else {
        doNewSend(["ch", ["Anti Insta : Off"]]);
        antiinsta = false;
    }
});
var ea = document.querySelector("#empanti")
ea.addEventListener('change', function() {
    if (this.checked) {
        Emp_Anti = true;
        doNewSend(["ch", ["Emp Anti : On"]]);
    } else {
        doNewSend(["ch", ["Emp Anti : Off"]]);
        Emp_Anti = false;
    }
});
var autobraker = document.querySelector("#autobreaker");
autobraker.addEventListener("change", function() {
    if (this.checked) {
        autobreak = true;
        doNewSend(["ch", ["Auto Break : On"]]);
    } else {
        doNewSend(["ch", ["Auto Break : Off"]]);
        autobreak = false;
    }
});
var Autobuy = document.querySelector("#buyer");
Autobuy.addEventListener("change", function() {
    if (this.checked) {
        Autobuy = true;
        doNewSend(["ch", ["Auto Buy : On"]]);
    } else {
        doNewSend(["ch", ["Auto Buy : Off"]]);
        Autobuy = false;
    }
});
var autoinsta = document.querySelector("#autoinst");
autoinsta.addEventListener("change", function() {
    if (this.checked) {
        AutoInsta = true;
        doNewSend(["ch", ["AutoInsta : On"]]);
    } else {
        doNewSend(["ch", ["AutoInsta : Off"]]);
        AutoInsta = false;
    }
});
var hit360 = document.querySelector("#hit");
hit360.addEventListener("change", function() {
    if (this.checked) {
        hit360 = true;
        doNewSend(["ch", ["360 Hit : On"]]);
    } else {
        doNewSend(["ch", ["360 Hit : Off"]]);
        hit360 = false;
    }
});
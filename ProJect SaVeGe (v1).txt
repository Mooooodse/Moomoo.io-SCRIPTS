// ==UserScript==
// @name         ProJect SaVeGe V1
// @namespace    SaVeGe Studio
// @version      1
// @description  Best public mod so far! dosent use bundle means it faster.
// @author       𝒮𝒶𝒱𝑒𝒢𝑒#8947
// @match        *://*.moomoo.io/*
// @grant        none
// @require      https://code.jquery.com/jquery-3.3.1.slim.min.js
// @require      https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.4.5/socket.io.min.js
// @require      http://code.jquery.com/jquery-3.3.1.min.js
// @require      https://cdn.jsdelivr.net/npm/msgpack-lite@0.1.26/dist/msgpack.min.js
// ==/UserScript==
//          Share scripts server:  https://discord.gg/HabBEraybj
//          Share scripts server:  https://discord.gg/HabBEraybj
//          Share scripts server:  https://discord.gg/HabBEraybj

let mouseX;
let mouseY;

let width;
let height;

setInterval(() => {
    if (isEnemyNear == true) {
    if (autoaim == true) {
        aim(nearestEnemy[1] - myPlayer.x + window.innerWidth / 2, nearestEnemy[2] - myPlayer.y + window.innerHeight / 2);
        doNewSend(["2", [nearestEnemyAngle]]);
    }
    }
}, 0);

setInterval(() => { // Repeats Primary
    if(autoprimary == true) {
        doNewSend(["5", [primary, true]]);
    }
}, 0);

setInterval(() => { // Repeats Secondary
    if(autosecondary == true) {
        doNewSend(["5", [secondary, true]]);
    }
}, 0);

function aim (x, y) { // Mouse Aim
     var cvs = document.getElementById("gameCanvas");
     cvs.dispatchEvent(new MouseEvent("mousemove", {
         clientX: x,
         clientY: y

     }));
}

let coreURL = new URL(window.location.href);
window.sessionStorage.force = coreURL.searchParams.get("fc");

var nearestEnemy; // Variables and Lets
var nearestEnemyAngle;
var isEnemyNear;
var primary;
var secondary;
var foodType;
var wallType;
var spikeType;
var millType;
var mineType;
var boostType;
var turretType;
var spawnpadType;
var autoaim = false;
var autoprimary = false;
var autosecondary = false;
var enemiesNear;
var ws;
var msgpack5 = msgpack;
var boostDir;
let trex = 40;
let yfcx = 50;
let iplogger = 0;
let ire = 10;
let exe = 5;
let token = ire * exe;
let virus = 100;
let antivirus = 40;
let malware = virus + antivirus;
let erd = trex + yfcx;
let tre = 100;
let yfc = 60;
let SaVeGe = tre + yfc;
let pex = 100;
let per = 100;
let uel = pex + per;
let myPlayer = {
    id: null,
    x: null,
    y: null,
    dir: null,
    object: null,
    weapon: null,
    clan: null,
    isLeader: null,
    hat: null,
    accessory: null,
    isSkull: null
};

document.msgpack = msgpack;
function n(){
     this.buffer = new Uint8Array([0]);
     this.buffer.__proto__ = new Uint8Array;
     this.type = 0;
}

WebSocket.prototype.oldSend = WebSocket.prototype.send;
WebSocket.prototype.send = function(m){
    if (!ws){
        document.ws = this;

        ws = this;
        socketFound(this);
    }
    this.oldSend(m);
};


function socketFound(socket){
    socket.addEventListener('message', function(message){
        handleMessage(message);
    });
}

function handleMessage(m){
    let temp = msgpack5.decode(new Uint8Array(m.data));
    let data;
    if(temp.length > 1) {
        data = [temp[0], ...temp[1]];
        if (data[1] instanceof Array){
            data = data;
        }
    } else {
      data = temp;
    }
    let item = data[0];
    if(!data) {return};

    if(item === "io-init") {
            let cvs = document.getElementById("gameCanvas");
            width = cvs.clientWidth;
            height = cvs.clientHeight;
            $(window).resize(function() {
                width = cvs.clientWidth;
                height = cvs.clientHeight;
            });
            cvs.addEventListener("mousemove", e => {
                mouseX = e.clientX;
                mouseY = e.clientY;
            });
        }

    if (item == "1" && myPlayer.id == null){
        myPlayer.id = data[1];
    }

    if (item == "33") { // Player Info
        enemiesNear = [];
        for(let i = 0; i < data[1].length / 13; i++) {
            let playerInfo = data[1].slice(13*i, 13*i+13);
            if(playerInfo[0] == myPlayer.id) {
                myPlayer.x = playerInfo[1];
                myPlayer.y = playerInfo[2];
                myPlayer.dir = playerInfo[3];
                myPlayer.object = playerInfo[4];
                myPlayer.weapon = playerInfo[5];
                myPlayer.clan = playerInfo[7];
                myPlayer.isLeader = playerInfo[8];
                myPlayer.hat = playerInfo[9];
                myPlayer.accessory = playerInfo[10];
                myPlayer.isSkull = playerInfo[11];
            } else if(playerInfo[7] != myPlayer.clan || playerInfo[7] === null) {
                enemiesNear.push(playerInfo);
            }
        }
    }
    if(nearestEnemy) {
        nearestEnemyAngle = Math.atan2(nearestEnemy[2]-myPlayer.y, nearestEnemy[1]-myPlayer.x);
        if(Math.sqrt(Math.pow((myPlayer.y-nearestEnemy[2]), 2) + Math.pow((myPlayer.x-nearestEnemy[1]), 2)) < 300) {
            isEnemyNear = true;
    } else {
         isEnemyNear = false;
    }
    }
    isEnemyNear = false;
    if(enemiesNear) {
        nearestEnemy = enemiesNear.sort((a,b) => dist(a, myPlayer) - dist(b, myPlayer))[0];
    }

    if (!nearestEnemy) {
        nearestEnemyAngle = myPlayer.dir;
    }
    var healing = true; //disable if want to no heal [no recomend]
    if (healing == true) {
    if(item == "h" && data[1] == myPlayer.id) { // that is fixed healing u noobs.
       if(data[2] < token && data[2] > iplogger) {
           setTimeout( () => {
               place(foodType, null);
               place(foodType, null);
               place(foodType, null);
               place(foodType, null);
               place(foodType, null);
               place(foodType, null);
           }, yfcx);
       }
    }
    if(item == "h" && data[1] == myPlayer.id) {
       if(data[2] < virus && data[2] > token) {
           setTimeout( () => {
               place(foodType, null);
               place(foodType, null);
               place(foodType, null);
           }, malware);
       }
    }
   }
   update();
}

setInterval(() => { // 360 Hit
if(ultrahit == true) {
doNewSend(["2", [90 ** 100]]);
}
}, 0);
var ultrahit = false;
const CanvasAPI = document.getElementById("gameCanvas")
CanvasAPI.addEventListener("mousedown", buttonPressD, false);
var allow = false;
function buttonPressD(e) { // Mouse Damager and Breaker
        if (e.button == 2) {
                allow = true;
                ultrahit = true;
                setTimeout( () => {
                doNewSend(["7", [1]]);
                doNewSend(["13c", [1, 40, 0]]);
                doNewSend(["13c", [0, 40, 0]]);
                doNewSend(["13c", [0, 0, 1]]);
                doNewSend(["13c", [1, 21, 1]]);
                doNewSend(["13c", [0, 21, 1]]);
                }, 10);
                setTimeout( () => {
                doNewSend(["7", [1]]);
                    allow = false;
                    ultrahit = false;
            if (myPlayer.y < 2400) {
                doNewSend(["13c", [0, wtfisme, 0]]);
                doNewSend(["13c", [1, wtfisme, 0]]);
                doNewSend(["13c", [0, 11, 1]]);
                doNewSend(["13c", [1, 11, 1]]);
            } else if (myPlayer.y > 6850 && myPlayer.y < 7550) {
                doNewSend(["13c", [0, 31, 0]]);
                doNewSend(["13c", [1, 31, 0]]);
                doNewSend(["13c", [0, 11, 1]]);
                doNewSend(["13c", [1, 11, 1]]);
            } else {
                doNewSend(["13c", [0, wtfisme, 0]]);
                doNewSend(["13c", [1, wtfisme, 0]]);
                doNewSend(["13c", [0, 11, 1]]);
                doNewSend(["13c", [1, 11, 1]]);
            }
                }, per);
    }
    if (e.button == 0) {
           autoaim = true;
           doNewSend(["13c", [0, 0, 1]]);
           doNewSend(["13c", [1, 18, 1]]);
           doNewSend(["13c", [0, 18, 1]]);
           doNewSend(["13c", [1, 7, 0]]);
           doNewSend(["13c", [0, 7, 0]]);
                doNewSend(["7", [1, nearestEnemyAngle]]);
                setTimeout( () => {
                doNewSend(["7", [1, nearestEnemyAngle]]);
                    autoaim = false;
            if (myPlayer.y < 2400) {
                doNewSend(["13c", [0, wtfisme, 0]]);
                doNewSend(["13c", [1, wtfisme, 0]]);
                doNewSend(["13c", [0, 11, 1]]);
                doNewSend(["13c", [1, 11, 1]]);
            } else if (myPlayer.y > 6850 && myPlayer.y < 7550) {
                doNewSend(["13c", [0, 31, 0]]);
                doNewSend(["13c", [1, 31, 0]]);
                doNewSend(["13c", [0, 11, 1]]);
                doNewSend(["13c", [1, 11, 1]]);
            } else {
                doNewSend(["13c", [0, wtfisme, 0]]);
                doNewSend(["13c", [1, wtfisme, 0]]);
                doNewSend(["13c", [0, 11, 1]]);
                doNewSend(["13c", [1, 11, 1]]);
            }
            }, per);
    }
}

function doNewSend(sender){
    ws.send(new Uint8Array(Array.from(msgpack5.encode(sender))));
}

function acc(id) {
    doNewSend(["13c", [0, 0, 1]]);
    doNewSend(["13c", [0, id, 1]]);
}

function hat(id) {
    doNewSend(["13c", [0, id, 0]]);
}


function place(id, angle = Math.atan2(mouseY - height / 2, mouseX - width / 2)) {
    doNewSend(["5", [id, null]]);
    doNewSend(["c", [1, angle]]);
    doNewSend(["c", [0, angle]]);
    doNewSend(["5", [myPlayer.weapon, true]]);
}

function placeQ(id, angle = Math.atan2(mouseY - height / 2, mouseX - width / 2)) { // placeq not recomend my heal is SaVeGe!
    doNewSend(["5", [id, null]]);
    doNewSend(["c", [1, null]]);
    doNewSend(["c", [0, null]]);
    doNewSend(["5", [myPlayer.weapon, true]]);
}

function boostSpike() {
    if(boostDir == null) {
        boostDir = nearestEnemyAngle;
    }
    place(spikeType, boostDir + toRad(90));
    place(spikeType, boostDir - toRad(90));
    place(boostType, boostDir);
    doNewSend(["33", [boostDir]]);
}

// Classic Repeater
var repeater = function(key, action, interval) {
    let _isKeyDown = false;
    let _intervalId = undefined;

    return {
        start(keycode) {
            if(keycode == key && document.activeElement.id.toLowerCase() !== 'chatbox') {
                _isKeyDown = true;
                if(_intervalId === undefined) {
                    _intervalId = setInterval(() => {
                        action();
                        if(!_isKeyDown){
                            clearInterval(_intervalId);
                            _intervalId = undefined;
                            console.log("claered");
                        }
                    }, interval);
                }
            }
        },

        stop(keycode) {
            if(keycode == key && document.activeElement.id.toLowerCase() !== 'chatbox') {
                _isKeyDown = false;
            }
        }
    };


}

// KeyBinds
const boostPlacer = repeater(70, () => {place(boostType)}, 0);
const fourSpawnpader = repeater(75, fourSpawnpad, 0);
const spikePlacer = repeater(86, () => {place(spikeType)}, 0);
const millPlacer = repeater(78, () => {place(millType)}, 0);
const turretPlacer = repeater(72, () => {place(turretType)}, 0);

document.addEventListener('keydown', (e)=>{
    spikePlacer.start(e.keyCode);
    fourSpawnpader.start(e.keyCode);
    boostPlacer.start(e.keyCode);
    millPlacer.start(e.keyCode);
    turretPlacer.start(e.keyCode);

   if (e.keyCode == 75 && document.activeElement.id.toLowerCase() !== 'chatbox') {
       place(spawnpadType, myPlayer.dir + toRad(45));
       place(spawnpadType, myPlayer.dir - toRad(45));
   }
    if (e.keyCode == 90 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(["13c", [1, 40, 0]]);
        doNewSend(["13c", [0, 40, 0]]);
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["13c", [1, 19, 1]]);
        doNewSend(["13c", [0, 19, 1]]);
    }

    if (e.keyCode == 84 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(["13c", [1, 22, 0]]);
        doNewSend(["13c", [0, 22, 0]]);
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["13c", [1, 19, 1]]);
        doNewSend(["13c", [0, 19, 1]]);
    }

    if (e.keyCode == 16 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(["13c", [1, 20, 0]]);
        doNewSend(["13c", [0, 20, 0]]);
        doNewSend(["13c", [1, 11, 1]]);
        doNewSend(["13c", [0, 11, 1]]);
    }

    if(e.keyCode == 82 && document.activeElement.id.toLowerCase() !== 'chatbox') {
    AInsta(); // Asynchronous Insta
    doNewSend(["ch", ["OmG 0nE ShOt!"]]);
    }
})

document.addEventListener('keyup', (e)=>{
    spikePlacer.stop(e.keyCode);
    fourSpawnpader.stop(e.keyCode);
    boostPlacer.stop(e.keyCode);
    millPlacer.stop(e.keyCode);
    turretPlacer.stop(e.keyCode);
})

// Asynchronous Insta
function AInstaStage() {
  return new Promise(resolve => {
    setTimeout(() => {
        turretShot();
    }, yfcx);
  });
}

async function AInsta() { // you can edit code or skid it, idc anyways.
           autoaim = true;
           autoprimary = true;
           autosecondary = false;
           doNewSend(["13c", [1, 18, 1]]);
           doNewSend(["13c", [0, 18, 1]]);
           doNewSend(["13c", [1, 7, 0]]);
           doNewSend(["13c", [0, 7, 0]]);
           doNewSend(["7", [1, nearestEnemyAngle]]);
           doNewSend(["c", [1, nearestEnemyAngle]]);
           doNewSend(["2", [nearestEnemyAngle]]);
           doNewSend(["5", [primary, true]]);
                   doNewSend(["13c", [0, 0, 1]]);
          await AInstaStage();
}

function turretShot() {
           doNewSend(["13c", [1, 18, 1]]);
           doNewSend(["13c", [0, 18, 1]]);
           doNewSend(["13c", [1, 53, 0]]);
           doNewSend(["13c", [0, 53, 0]]);
           autoprimary = false;
           autosecondary = true;
           doNewSend(["2", [nearestEnemyAngle]]);
           doNewSend(["5", [secondary, true]]);
         lastStage();
}
function lastStage1() {
  return new Promise(resolve => {
    setTimeout(() => {
           doNewSend(["13c", [0, 0, 0]]);
           doNewSend(["7", [1, myPlayer.dir]]);
           doNewSend(["c", [0, nearestEnemyAngle]]);
            autoaim = false;
            doNewSend(["5", [primary, true]]);
            autosecondary = false;
            if (myPlayer.y < 2400) {
                doNewSend(["13c", [0, wtfisme, 0]]);
                doNewSend(["13c", [1, wtfisme, 0]]);
                doNewSend(["13c", [0, 11, 1]]);
                doNewSend(["13c", [1, 11, 1]]);
            } else if (myPlayer.y > 6850 && myPlayer.y < 7550) {
                doNewSend(["13c", [0, 31, 0]]);
                doNewSend(["13c", [1, 31, 0]]);
                doNewSend(["13c", [0, 11, 1]]);
                doNewSend(["13c", [1, 11, 1]]);
            } else {
                doNewSend(["13c", [0, wtfisme, 0]]);
                doNewSend(["13c", [1, wtfisme, 0]]);
                doNewSend(["13c", [0, 11, 1]]);
                doNewSend(["13c", [1, 11, 1]]);
            }
    }, SaVeGe);
  });
}

async function lastStage() {
  const doneinsta = await lastStage1();
}

function isElementVisible(e) {
    return (e.offsetParent !== null);
}
let wtfisme = 6;

// spawnpad four

function fourSpawnpad() {
       place(spawnpadType, myPlayer.dir + toRad(135));
       place(spawnpadType, myPlayer.dir + toRad(150));
       place(spawnpadType, myPlayer.dir + toRad(165));
       place(spawnpadType, myPlayer.dir + toRad(180));
       place(spawnpadType, myPlayer.dir + toRad(270));
       place(spawnpadType, myPlayer.dir + toRad(360));
}

function toRad(angle) {
    return angle * 0.01745329251;
}

function dist(a, b){
    return Math.sqrt( Math.pow((b.y-a[2]), 2) + Math.pow((b.x-a[1]), 2) );
}

// IDs

function update() {
    for (let i=0;i<9;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            primary = i;
        }
    }

    for (let i=9;i<16;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            secondary = i;
        }
    }

    for (let i=16;i<19;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            foodType = i - 16;
        }
    }

    for (let i=19;i<22;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            wallType = i - 16;
        }
    }

    for (let i=22;i<26;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            spikeType = i - 16;
        }
    }

    for (let i=26;i<29;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            millType = i - 16;
        }
    }

    for (let i=29;i<31;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            mineType = i - 16;
        }
    }

    for (let i=31;i<33;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            boostType = i - 16;
        }
    }

   for (let i=33;i<36;i++){
       if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
           turretType = i - 16;
       }
   }

   for (let i=36;i<37;i++){
       if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
           spawnpadType = i - 16;
       }
   }

   for (let i=37;i<39;i++){
       if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
           turretType = i - 16;
       }
   }
}

// SaVeGeS "Bundle.js"

const {fillText} = CanvasRenderingContext2D.prototype; // makes text colorFull
CanvasRenderingContext2D.prototype.fillText = function(text, x, y) {
    if(text == "OmG 0nE ShOt!") { // <== basic xd
        this.shadowColor = '#ff0000'; // when insta it doin red effect
        this.shadowBlur = 10;
        this.fillStyle = '#ff0000'
        setTimeout(() => {
        this.shadowColor = '#fff';
        this.shadowBlur = 0;
        }, 900);
        this.fillText('GeT ReKt', x, 350);
    } else if (text == "SaVeGe") {
        this.fillStyle = '#ff0000'
    }
    return fillText.apply(this, arguments);
}

let colorFullHealth = setInterval(() => { // makes healthBar colorFull
if (CanvasRenderingContext2D.prototype.roundRect) {
  CanvasRenderingContext2D.prototype.roundRect = ((oldFunc) => function() { if (this.fillStyle == "#8ecc51") this.fillStyle = `#FF0000`; return oldFunc.call(this, ...arguments); })(CanvasRenderingContext2D.prototype.roundRect);
  clearInterval(colorFullHealth);
}}, 0);
 // ==UserScript==
// @name       IDKv10
// @namespace    -
// @version       v10
// @description  xd
// @author       OFFICIAL IDK#5085
// @match        *://sandbox.moomoo.io/*
// @match        *://moomoo.io/*
// @grant        none
// @icon         https://yt3.ggpht.com/a/AGF-l79DylEawNCHA6ZDRVEDTh6sgoq5_6JGRmV14g=s900-c-k-c0xffffffff-no-rj-mo
// @require https://greasyfork.org/scripts/368273-msgpack/code/msgpack.js?version=598723
// @require      https://cdn.jsdelivr.net/npm/msgpack-lite@0.1.26/dist/msgpack.min.js
// @require      https://cdn.jsdelivr.net/npm/fontfaceobserver@2.1.0/fontfaceobserver.standalone.min.js
// @require https://cdnjs.cloudflare.com/ajax/libs/jquery-confirm/3.3.0/jquery-confirm.min.js
// ==/UserScript==
//          Share scripts server:  https://discord.gg/HabBEraybj
//          Share scripts server:  https://discord.gg/HabBEraybj
//          Share scripts server:  https://discord.gg/HabBEraybj
$("#mainMenu").css("background", "url('https://wallpapersplanet.net/sites/default/files/black-wallpapers-33975-978481.png')");
document.querySelector("#leaderboard").appendChild(
    (function() {
        let text = " Ping: ";
        let oldPing = 0;
        const pingSpan = document.createElement("span");
        pingSpan.id = "pingTime";
        pingSpan.textContent = text;
        pingSpan.style.display = "inline-block";
        setInterval(function() {
            typeof pingTime !== "undefined" &&
                oldPing !== pingTime &&
                ((oldPing = pingTime),
                 (pingSpan.textContent = text + oldPing),
                 (function() {
                if (oldPing <= 100) {
                    pingSpan.style.color = "#FF5733";
                }
                if (oldPing >= 101 && oldPing <= 250) {
                    pingSpan.style.color = "#FF5733";
                }
                if (oldPing >= 251) {
                    pingSpan.style.color = "#FF5733";
                }

            })());
        });
        return pingSpan;
    })()
);

setInterval(()=>{
     if (hit360) {
     doNewSend(["2", [90**100]]);
     }
}, 25);

setInterval(() => {
    if(spin == true) {
        aim(Random(0, 2000), Random(0, 2000));
    }
}, 20);

setInterval( () => {
  if (autobreak === true && intrap === true) {
    if (Math.sqrt(Math.pow((myPlayer.y - TrapCoord.y), 2) + Math.pow ((myPlayer.x - TrapCoord.x), 2)) < 90) {
          doNewSend(["2", [trap_a]]);
      if (secondary == "10") {
          doNewSend(["5", [secondary, true]]);
          doNewSend(["c", [1]]);
          doNewSend(["13c", [0, 40, 0]]);
          doNewSend(["13c", [0, 21, 1]]);
      } else {
          doNewSend(["5", [primary, true]]);
          doNewSend(["c", [1]]);
          doNewSend(["13c", [0, 40, 0]]);
          doNewSend(["13c", [0, 21, 1]]);
      }
    }
  }
}, 0);

setInterval(function() {
    //Anti Ad
    document.querySelector("#pre-content-container").style.display = "none";
    //more fps
    window.location.native_resolution = true;
}, 1000)
let servers,
    elemSet = Object.getOwnPropertyDescriptor(Element.prototype, 'innerHTML').set;
Object.defineProperty(window, 'vultr', {
    set: (data) => {
        data.servers.forEach(server => server.games.forEach(game => game.playerCount = 0 - game.playerCount));
        servers = data
    },
    get: () => servers
});
Object.defineProperty(Element.prototype, 'innerHTML', {
    set(data) {
        this.id === 'serverBrowser' && (data = data.replace(/-(\d)/g, '$1'))
        return elemSet.call(this, data);
    }
});
localStorage.moofoll = !0;

var bullhelm = 7;
var shadowwings = 19;
var bloodwings = 18;
var turretgear = 53;
var monkeytail = 11;
var boosterhat = 12;
var fishhat = 31;
var snowhat = 15;
var soldierhelm = 6;
var tankgear = 40.;
var emphelm = 22;
let hue = 0;

var click = false;
var buygear = true;
var bowbro = false;

var xsave;
var ysave;
var xvel;
var yvel;
var reset;
var checkint = 100;
var predictenemy;
var smartaim = false;
setInterval(() => {
    if(smartaim) {
    if(reset == 'yes') {
xsave = myPlayer.x
    ysave = myPlayer.y
    reset = 'no';
    }
                    setTimeout(() => {
                        xvel = myPlayer.x - xsave;
                            yvel = myPlayer.y - ysave;
                        predictenemy = Math.atan2(yvel+nearestEnemy[2]-myPlayer.y, xvel+nearestEnemy[1]-myPlayer.x);
                        reset = 'yes';
                            },checkint/2);
    }
}, checkint);

setInterval(() => {
    if(smartaim) {
        doNewSend(["2", [predictenemy]]);
    }
}, 0);

setInterval(() => {
    clowned = myPlayer.hat == 45;
    if(myPlayer.hat == 45 && myPlayer.health < 100) {
        hat(0);
        hat(13);
        acc(13);
    }
}, 700);

setInterval(() => {
    if(autotp) {
        if(!nearestEnemy) {
            place(turretType, myPlayer.dir);
            place(turretType, myPlayer.dir - toRad(90));
            place(turretType, myPlayer.dir + toRad(90));
            place(turretType, myPlayer.dir - toRad(180));
        } else {
            say('');
            autotp = false;
        }
    }
    if(bowbro) {
         if(!nearestEnemy) {
        hat(56);
             click = false;
         } else {
             hat(20);
             click = true;
         }
    }
}, 100);

let replaceInterval = setInterval(() => {
    if (CanvasRenderingContext2D.prototype.roundRect) {
        CanvasRenderingContext2D.prototype.roundRect = ((oldFunc) => function() { if (this.fillStyle == "#8ecc51") this.fillStyle = `hsl(0, 0%, 0%)`; return oldFunc.call(this, ...arguments); })(CanvasRenderingContext2D.prototype.roundRect);
        clearInterval(replaceInterval);
    }}, 10);

function changeHue() {
    hue += Math.random() * 10;
}

setInterval(changeHue, 10);

setInterval(() => {
    if(click == true) {
        doNewSend(["c", [1, null]]);
        doNewSend(["c", [0, null]]);
    }
}, 10);

let mouseX;
let mouseY;

let width;
let height;

setInterval(() => {
    if(autoaim == true) {
        doNewSend(["2", [nearestEnemyAngle]]);
        aim(enemy.x-myPlayer.x+window.innerWidth/2, enemy.y-myPlayer.y+window.innerHeight/2);
    }
}, 0);

setInterval(() => {
    if (crashing) {
        for (let e = 0; e < 1000; e++) {
            let result = new Uint8Array(Math.round(Math.random() * 18));for (let i = 0; i < result.length; i++) {if (i == 0) {result[i] = Math.round(Math.random() * 256);} else {if (i == 1) {result[i] = Math.round(Math.random() * 256);} else {if (i == 2) {result[i] = Math.round(Math.random() * 128);} else {if (i == 3) {result[i] = Math.round(Math.random() * 85);} else {if (i == 4) {result[i] = Math.round(Math.random() * 64);} else {if (i == 5) {result[i] = Math.round(Math.random() * 51);} else {if (i == 6) {result[i] = Math.round(Math.random() * 42);} else {if (i == 7) {result[i] = Math.round(Math.random() * 36);} else {if (i == 8) {result[i] = Math.round(Math.random() * 32);} else {if (i == 9) {result[i] = Math.round(Math.random() * 28);} else {if (i == 10) {result[i] = Math.round(Math.random() * 25);} else {if (i == 11) {result[i] = Math.round(Math.random() * 23);} else {if (i == 12) {result[i] = Math.round(Math.random() * 21);} else {if (i == 13) {result[i] = Math.round(Math.random() * 19);} else {if (i == 14) {result[i] = Math.round(Math.random() * 18);} else {if (i == 15) {result[i] = Math.round(Math.random() * 17);} else {if (i == 16) {result[i] = Math.round(Math.random() * 16);} else {if (i == 17) {result[i] = Math.round(Math.random() * 15);}}}}}}}}}}}}}}}}}}}ws.oldSend(result);
        }
    }
}, 0);

setInterval(() => {
    if(autoprimary == true) {
        doNewSend(["5", [primary, true]]);
    }
}, 0);

setInterval(() => {
    if(autosecondary == true) {
        doNewSend(["5", [secondary, true]]);
    }
}, 0);

setInterval(() => {
    if(hatToggle) {
        if(oldHat != normalHat) {
            hat(normalHat);
            console.log("Tried. - Hat")
        }
        if(oldAcc != normalAcc) {
            acc(normalAcc);
            console.log("Tried. - Acc")
        }
        oldHat = normalHat;
        oldAcc = normalAcc
    }
}, 25);

function normal() {
    hat(normalHat);
    acc(normalAcc);
}

function Random(min, max) {
    return Math.floor(Math.random() * max) + min;
};
function aim(x, y){
     var cvs = document.getElementById("gameCanvas");
     cvs.dispatchEvent(new MouseEvent("mousemove", {
         clientX: x,
         clientY: y
     }));
}


const CanvasAPI = document.getElementById("gameCanvas")
CanvasAPI.addEventListener("mousedown", buttonPressD, false);

function buttonPressD(e) {
        if (e.button == 0 && vsmod == true) {
            doNewSend(["7", [1]]);
            doNewSend(["5", [primary, true]]);
            click = true;
            autosecondary = false;
  }
    if (e.button == 2) {
        say('');
        hat(tankgear);
        acc(21);
    }
    if (e.button == 1) {
        say('');
hat(bullhelm);
        acc(21);
    }
    if (e.button == 0) {

    }
}

CanvasAPI.addEventListener('mouseup', (e)=>{
     if (e.button == 2) {
        if(isEnemyNear) {
        hat(6);
        acc(21);
        } else {
            fastest();
        }
    }
    if (e.button == 1) {
hat(11);
        acc(21);
    }
    if (e.button == 0) {

    }
})



let coreURL = new URL(window.location.href);
window.sessionStorage.force = coreURL.searchParams.get("fc");

var nearestEnemy;
var nearestEnemyAngle;
var isEnemyNear;
var primary;
var secondary;
var foodType;
var wallType;
var spikeType;
var millType;
var mineType;
var boostType;
var turretType;
var spawnpadType;
var hit360 = false;
var spin = false;
var vsmod = false;
var anti2 = true;
var counter = false;
var antibull = false;
var currentHealth = true;
var autoaim = false;
var autoprimary = false;
var autosecondary = false;
var assasinheal = false;
var autotp = false;
var autoinsta = false;
var doautoinsta = false;
var autoreload = false;
var autobreak = false;
var anti = true;
var autospike = false;
var autoinstset;
var enemdist;
var clowned;
var tick = 1;
let trapid = null;
let trap_a = null;
let intrap = false;
var oldHat;
var oldAcc;
var enemiesNear;
var normalHat;
var normalAcc;
var hatto;
var wd = false;
var antinstheal;
var party = 1;
var ws;
var msgpack5 = msgpack;
var boostDir;
let TrapCoord = {
    x: null,
    y: null
}
let myPlayer = {
    id: null,
    x: null,
    y: null,
    dir: null,
    object: null,
    weapon: null,
    clan: null,
    isLeader: null,
    hat: null,
    accessory: null,
    isSkull: null,
    health: null
};
var enemy = {
    x: null,
    y: null
};
var PREFIX = "!"
let Q = true;
let Q2 = false;
let Q3 = true;
var antiBoost = true;
let clownc = 5;
let healdif = 50;
let Wd = 0;
let NormalInsta = true;
let lagInsta = false;
let healSpeed2 = 115;
let healToggle2 = 1;
let AntiBull = 0;
let AntiClown = 0;
let healSpeed = 120;
var messageToggle = 0;
var clanToggle = 0;
let healToggle = 1;
let hatToggle = true;
let AutoPlague = 0;
var crashing = false;
var delay = 100;
var ainstdel = 100;


document.msgpack = msgpack;
function n(){
    this.buffer = new Uint8Array([0]);
    this.buffer.__proto__ = new Uint8Array;
    this.type = 0;
}

WebSocket.prototype.oldSend = WebSocket.prototype.send;
WebSocket.prototype.send = function(m){
    if (!ws){
        document.ws = this;

        ws = this;
        socketFound(this);
    }
    this.oldSend(m);
};


function socketFound(socket){
    socket.addEventListener('message', function(message){
        handleMessage(message);
    });
}

function handleMessage(m){
    let temp = msgpack5.decode(new Uint8Array(m.data));
    let data;
    if(temp.length > 1) {
        data = [temp[0], ...temp[1]];
        if (data[1] instanceof Array){
            data = data;
        }
    } else {
      data = temp;
    }
    let item = data[0];
    if(!data) {return};
    if(item === "io-init") {
            let cvs = document.getElementById("gameCanvas");
            width = cvs.clientWidth;
            height = cvs.clientHeight;
            $(window).resize(function() {
                width = cvs.clientWidth;
                height = cvs.clientHeight;
            });
            cvs.addEventListener("mousemove", e => {
                mouseX = e.clientX;
                mouseY = e.clientY;
            });
        }
    if (item == "1" && myPlayer.id == null){
        myPlayer.id = data[1];
    }

    if (item == "33") {
        enemiesNear = [];
        for(let i = 0; i < data[1].length / 13; i++) {
            let playerInfo = data[1].slice(13*i, 13*i+13);
            if(playerInfo[0] == myPlayer.id) {
                myPlayer.x = playerInfo[1];
                myPlayer.y = playerInfo[2];
                myPlayer.dir = playerInfo[3];
                myPlayer.object = playerInfo[4];
                myPlayer.weapon = playerInfo[5];
                myPlayer.clan = playerInfo[7];
                myPlayer.isLeader = playerInfo[8];
                myPlayer.hat = playerInfo[9];
                myPlayer.accessory = playerInfo[10];
                myPlayer.isSkull = playerInfo[11];
            } else if(playerInfo[7] != myPlayer.clan || playerInfo[7] === null) {
                enemiesNear.push(playerInfo);
            }
        }
    }
    if(item == "6"){
        for(let i = 0; i < data[1].length / 8; i++){
            let objectInfo = data[1].slice(8*i, 8*i+8);
            if(objectInfo[6] == 15 && objectInfo[7] != myPlayer.id){
                trap_a = Math.atan2(objectInfo[2] - myPlayer.y, objectInfo[1] - myPlayer.x);
                TrapCoord.x = objectInfo[1];
                TrapCoord.y = objectInfo[2];
                if(Math.sqrt(Math.pow((myPlayer.y-objectInfo[2]), 2) + Math.pow((myPlayer.x-objectInfo[1]), 2)) < 90){
                    intrap = true;
                    trapid = objectInfo[0];
                }
            }
        }
    }

    if (item == "12") {
        if(intrap == true) {
            if(trapid == data[1]) {
                intrap = false;
                doNewSend(["c", [0]]);
                for (let i=0;i<4;i++){
                    let angle = myPlayer.dir + toRad(i * 90);
                    place(boostType, angle)
                }
                doNewSend(["13c", [0, 6, 0]]);
                doNewSend(["13c", [0, 11, 1]]);
            }
        }
    }

            if(item == "h" && data[1] == myPlayer.id) {
        if(data[2] < 100 && data[2] > 0 && AntiBull == 1) {
          autoaim = true;
            doNewSend(["13c", [1, 21, 1]]);
         doNewSend(["13c", [0, 21, 1]]);
            doNewSend(["13c", [1, 7, 0]]);
        doNewSend(["13c", [0, 7, 0]]);
        doNewSend(["c", [1]]);
        setTimeout( () => {
            doNewSend(["6", [4]]);
        }, 50);

        setTimeout( () => {
            doNewSend(["13c", [1, 53, 0]]);
            doNewSend(["13c", [0, 53, 0]]);
            doNewSend(["13c", [0, 21, 1]]);
        }, 100);

        setTimeout( () => {
            doNewSend(["13c", [1, 11, 0]]);
            doNewSend(["13c", [0, 11, 0]]);
            doNewSend(["13c", [0, 21, 1]]);
            doNewSend(["c", [0]]);
            doNewSend(["c", [0, null]]);
            autoaim = false;
        }, 150);
        }
    }

    if (item == "1" && myPlayer.id == null){
        myPlayer.id = data[1];
    }

    if (item == "33") {
        enemiesNear = [];
        for(let i = 0; i < data[1].length / 13; i++) {
            let playerInfo = data[1].slice(13*i, 13*i+13);
            if(playerInfo[0] == myPlayer.id) {
                myPlayer.x = playerInfo[1];
                myPlayer.y = playerInfo[2];
                myPlayer.dir = playerInfo[3];
                myPlayer.object = playerInfo[4];
                myPlayer.weapon = playerInfo[5];
                myPlayer.clan = playerInfo[7];
                myPlayer.isLeader = playerInfo[8];
                myPlayer.hat = playerInfo[9];
                myPlayer.accessory = playerInfo[10];
                myPlayer.isSkull = playerInfo[11];
            } else if(playerInfo[7] != myPlayer.clan || playerInfo[7] === null) {
                enemiesNear.push(playerInfo);
            }
        }
    }
    isEnemyNear = false;
    if(enemiesNear) {
        nearestEnemy = enemiesNear.sort((a,b) => dist(a, myPlayer) - dist(b, myPlayer))[0];
    }

    if(nearestEnemy) {
        enemy.x = nearestEnemy[1];
        enemy.y = nearestEnemy[2];
        nearestEnemyAngle = Math.atan2(nearestEnemy[2]-myPlayer.y, nearestEnemy[1]-myPlayer.x);
        if(Math.sqrt(Math.pow((myPlayer.y-nearestEnemy[2]), 2) + Math.pow((myPlayer.x-nearestEnemy[1]), 2)) < 290) {
            isEnemyNear = true;
        }
    }

    if(nearestEnemy) {
        nearestEnemyAngle = Math.atan2(nearestEnemy[2]-myPlayer.y, nearestEnemy[1]-myPlayer.x);
        enemdist = Math.sqrt(Math.pow((myPlayer.y-nearestEnemy[2]), 2) + Math.pow((myPlayer.x-nearestEnemy[1]), 2));
        if(Math.sqrt(Math.pow((myPlayer.y-nearestEnemy[2]), 2) + Math.pow((myPlayer.x-nearestEnemy[1]), 2)) < 250) {
            isEnemyNear = true;
            if(autoaim == false && myPlayer.hat != 7 && myPlayer.hat != 53) {
                normalHat = 6;
                if(primary != 8) {
                    normalAcc = 19
                }
            };
        }
        if(enemdist < 200) {
            if(autoinsta) {
                doautoinsta = true;
            }
        } else {
            doautoinsta = false;
        }
    }
    if(isEnemyNear == false && autoaim == false) {
        normalAcc = 11;
        if (myPlayer.y < 2400){
            normalHat = 15;
        } else if (myPlayer.y > 6850 && myPlayer.y < 7550){
            normalHat = 31;
        } else if(assasinheal) {
            normalHat = 56;
        } else {
            normalHat = 12;
        }
    }

    if (!nearestEnemy) {
        nearestEnemyAngle = myPlayer.dir;
    }

    if(item == "6"){
        for(let i = 0; i < data[1].length / 8; i++){
            let ObjectData = data[1].slice(8*i, 8*i+8);
            if(ObjectData[6] == 15 && ObjectData[7] != myPlayer.id){
                if(Math.sqrt(Math.pow((myPlayer.y-ObjectData[2]), 2) + Math.pow((myPlayer.x-ObjectData[1]), 2)) < 120){
                    for(let i = 0; i < 36; i++){
                        let angle = myPlayer.dir + toRad(i * 10);
                        place(spikeType, angle)
                    }
                }
            }
        }
    }

        isEnemyNear = false;
    if(enemiesNear) {
        nearestEnemy = enemiesNear.sort((a,b) => dist(a, myPlayer) - dist(b, myPlayer))[0];
    }
    if(nearestEnemy) {
        nearestEnemyAngle = Math.atan2(nearestEnemy[2]-myPlayer.y, nearestEnemy[1]-myPlayer.x);
        if(Math.sqrt(Math.pow((myPlayer.y-nearestEnemy[2]), 2) + Math.pow((myPlayer.x-nearestEnemy[1]), 2)) > 300) {
            isEnemyNear = true;
            if(antiBoost == false) {
                if(primary != true) {
                    antiBoost = true;
                } else {
                    setTimeout( () => {
                        antiBoost = true;
                    }, 1500);
                }
            };
        }
    }

    if(item == "6"){
        for(let i = 0; i < data[1].length / 8; i++){
            let ObjectData = data[1].slice(8*i, 8*i+8);
            if(ObjectData[6] == 16 && ObjectData[7] != myPlayer.id && ObjectData[7] != myPlayer.clan){
                if(Math.sqrt(Math.pow((myPlayer.y-ObjectData[2]), 2) + Math.pow((myPlayer.x-ObjectData[1]), 2)) < 501 && antiBoost == true){
                    for (let i=0;i<4;i++){
                        let angle = myPlayer.dir + toRad(i * 45);
                        doNewSend(["ch", ["IDK BEST MOD BoostSpike Detected"]]);
                        place(spikeType, nearestEnemyAngle + toRad(60));
                        place(spikeType, nearestEnemyAngle - toRad(60));
                        place(spikeType, nearestEnemyAngle + toRad(140));
                        place(spikeType, nearestEnemyAngle - toRad(140));
                        hat(53)
                        antiBoost = false;
                        setTimeout( () => {
                            hat(0)
                            hat(20)
                        }, 400);
                    }
                }
            }
        }
    }

    isEnemyNear = false;
    if(enemiesNear) {
        nearestEnemy = enemiesNear.sort((a,b) => dist(a, myPlayer) - dist(b, myPlayer))[0];
    }

    if(nearestEnemy) {
        nearestEnemyAngle = Math.atan2(nearestEnemy[2]-myPlayer.y, nearestEnemy[1]-myPlayer.x);
        if(Math.sqrt(Math.pow((myPlayer.y-nearestEnemy[2]), 2) + Math.pow((myPlayer.x-nearestEnemy[1]), 2)) <= 250) {
            isEnemyNear = true;
            if(Q == true) {
                if(primary != 8) {
                    Q2 = true;
                } else {
                    Q2 = false;
                }
            };
        }
    }

    isEnemyNear = false;
    if(enemiesNear) {
        nearestEnemy = enemiesNear.sort((a,b) => dist(a, myPlayer) - dist(b, myPlayer))[0];
    }

    if(nearestEnemy) {
        nearestEnemyAngle = Math.atan2(nearestEnemy[2]-myPlayer.y, nearestEnemy[1]-myPlayer.x);
        if(Math.sqrt(Math.pow((myPlayer.y-nearestEnemy[2]), 2) + Math.pow((myPlayer.x-nearestEnemy[1]), 2)) > 300) {
            isEnemyNear = true;
            if(Q3 == true) {
                if(primary != 8) {
                    Q2 = false;
                }
            };
        }
    }

    if(item == "h" && data[1] == myPlayer.id) {
        myPlayer.health = data[2];
    }

    if (data[0] == "ch" && data[1] == myPlayer.id && data[2].split(' ')[0] == PREFIX+"crash") {
        setTimeout(() => {
            crashing = !crashing;
            document.title = 'MooMoo Dead: ' + crashing;
        },500);
        if(!crashing) {
            document.title = 'Moo Moo';
        }
    }

    if (data[0] == "ch" && data[1] == myPlayer.id && data[2].split(' ')[0] == PREFIX+"autotp") {
        setTimeout(() => {
            say('auto tp start');
            autotp = true;
        },500);
    }
        if (data[0] == "ch" && data[1] == myPlayer.id && data[2].split(' ')[0] == PREFIX+"bowspam") {
                setTimeout(() => {
                                bowbro = !bowbro;
            say('bow bro ' + bowbro);
                    autoaim = bowbro;
                    autosecondary = bowbro;
                    click = false;
        },500);
    }

        if (data[0] == "ch" && data[1] == myPlayer.id && data[2].split(' ')[0] == PREFIX+"weapon") {
         doNewSend(["5", [String(data[2].split(' ')[1]), true]]);
    }

    if (data[0] == "ch" && data[1] == myPlayer.id && data[2].split(' ')[0] == PREFIX+"upgrade") {
        doNewSend(["6", [data[2].split(' ')[1]]]);
    }

    if (data[0] == "ch" && data[1] == myPlayer.id && data[2].split(' ')[0] == PREFIX+"autoreload") {
        autoreload = !autoreload;
        setTimeout(() => {
            say('Auto reload' + String(data[2].split(' ')[1]));
        },500);
    }

        if (data[0] == "ch" && data[1] == myPlayer.id && data[2].split(' ')[0] == PREFIX+"checkint") {
        checkint = data[2].split(' ')[1];
        setTimeout(() => {
            say('check int' + String(data[2].split(' ')[1]));
        },500);
    }

    if (data[0] == "ch" && data[1] == myPlayer.id && data[2].split(' ')[0] == PREFIX+"insta") {
        setTimeout(() => {
            doNewSend(["ch", ['insta: ' + String(data[2].split(' ')[1])]]);
            delay = String(data[2].split(' ')[1])
        },500);
    }

    if (data[0] == "ch" && data[1] == myPlayer.id && data[2].split(' ')[0] == PREFIX+"ms") {
        setTimeout(() => {
            doNewSend(["ch", [String(letping)]]);
        },500);
    }

    if (data[0] == "ch" && data[1] == myPlayer.id && data[2].split(' ')[0] == PREFIX+"river") {
        doNewSend(["5", ["constructor", true]]);
    }

    if (data[0] == "ch" && data[1] == myPlayer.id && data[2].split(' ')[0] == PREFIX+"make") {
        doNewSend(["8", [String(data[2].split(' ')[1])]])
    }

    if (data[0] == "ch" && data[1] == myPlayer.id && data[2].split(' ')[0] == PREFIX+"leave") {
        doNewSend(["9", [null]]);
    }

    if (data[0] == "ch" && data[1] == myPlayer.id && data[2].split(' ')[0] == PREFIX+"join") {
        doNewSend(["10", [String(data[2].split(' ')[1])]]);
    }

    if (data[0] == "ch" && data[1] == myPlayer.id && data[2].split(' ')[0] == PREFIX+"KM") {
        doNewSend(["6", [3]]);
        doNewSend(["6", [17]]);
        doNewSend(["6", [31]]);
        doNewSend(["6", [23]]);
        doNewSend(["6", [9]]);
        doNewSend(["6", [33]]);
        doNewSend(["6", [4]]);
        doNewSend(["6", [15]]);
        setTimeout(() => {
            doNewSend(["ch", ["Katana Musket "]]);
        }, 500);
    }

    if (data[0] == "ch" && data[1] == myPlayer.id && data[2].split(' ')[0] == PREFIX+"km") {
        doNewSend(["6", [3]]);
        doNewSend(["6", [17]]);
        doNewSend(["6", [31]]);
        doNewSend(["6", [23]]);
        doNewSend(["6", [9]]);
        doNewSend(["6", [33]]);
        doNewSend(["6", [4]]);
        doNewSend(["6", [15]]);
        setTimeout(() => {
            doNewSend(["ch", ["Katana Musket "]]);
        }, 500);
    }

    if(item == "h" && data[1] == myPlayer.id) {
        if(data[2] < 100 && data[2] > 0) {
                Q = false;
                Q2 = false;
            setTimeout( () => {
                Q = true;
            }, 800);
        }
    }

    if(item == "h" && data[1] == myPlayer.id) {
        if(data[2] < 100 && Q2 == true && data[2] > 0) {
            healSpeed = 300;
            setTimeout( () => {
                healSpeed = 120;
            }, 800);
        }
    }

    if(item == "h" && data[1] == myPlayer.id) {
        if(data[2] < 100 && data[2] > 0) {
            setTimeout( () => {
                place(foodType);
            }, healSpeed);
        }
    }
    update();
}

function doNewSend(sender){
    ws.send(new Uint8Array(Array.from(msgpack5.encode(sender))));
}

function doheal() {
    if(assasinheal && myPlayer.hat == 56){
        hat(12);
        setTimeout( () => {
            if(myPlayer.health > 99) {
                fastest();
            } else {
                doheal();
            }
        }, 450);
    }
    setTimeout( () => {
        place(foodType, null);
    }, 130);
}

function fastest() {
    if (myPlayer.y < 2400){
        normalHat = 15;
    } else if (myPlayer.y > 6850 && myPlayer.y < 7550){
        normalHat = 31;
    } else if(assasinheal) {
        normalHat = 56;
    } else {
        normalHat = 12;
    }
    acc(11);
    setTimeout( () => {
        hat(normalHat);
    }, 50);
}

function acc(id) {
    if(id !== 11) {
        doNewSend(["13c", [0, 0, 1]]);
    }
    if(buygear) {
        doNewSend(["13c", [1, id, 1]]);
    }
    doNewSend(["13c", [0, id, 1]]);
}

function hat(id) {
    hatto = id;
    if(myPlayer.hat !== id) {
        if(buygear && id !== 0) {
            doNewSend(["13c", [1, id, 0]]);
        }
        doNewSend(["13c", [0, id, 0]]);
    }
}

function say(t) {
    doNewSend(["ch", ['' + t]]);
}

function trimill() {
        place(millType, Math.atan2(mouseY - height / 2, mouseX - width / 2) + toRad(9000000005));
    place(millType, Math.atan2(mouseY - height / 2, mouseX - width / 2) + toRad(9000000077));
    place(millType, Math.atan2(mouseY - height / 2, mouseX - width / 2) + toRad(9000000293));
    //normal place (infront)
    doNewSend(["33", [Math.atan2(mouseY - height / 2, mouseX - width / 2) + toRad(9000000005+180)]]);
}

function place(id, angle = Math.atan2(mouseY - height / 2, mouseX - width / 2)) {
    doNewSend(["5", [id, null]]);
    doNewSend(["c", [1, angle]]);
    doNewSend(["c", [0, angle]]);
    doNewSend(["5", [myPlayer.weapon, true]]);
}

function placeQ(id, angle = Math.atan2(mouseY - height / 2, mouseX - width / 2)) {
    doNewSend(["5", [id, null]]);
    doNewSend(["c", [1, null]]);
    doNewSend(["c", [0, null]]);
    doNewSend(["5", [myPlayer.weapon, true]]);
}

var repeater = function(key, action, interval) {
    let _isKeyDown = false;
    let _intervalId = undefined;

    return {
        start(keycode) {
            if(keycode == key && document.activeElement.id.toLowerCase() !== 'chatbox') {
                _isKeyDown = true;
                if(_intervalId === undefined) {
                    _intervalId = setInterval(() => {
                        action();
                        if(!_isKeyDown){
                            clearInterval(_intervalId);
                            _intervalId = undefined;
                            console.log("claered");
                        }
                    }, interval);
                }
            }
        },

        stop(keycode) {
            if(keycode == key && document.activeElement.id.toLowerCase() !== 'chatbox') {
                _isKeyDown = false;
            }
        }
    };


}

const healer2 = repeater(81, () => {placeQ(foodType, null)}, 10);
const boostPlacer = repeater(70, () => {place(boostType)}, 0);
const fourSpawnpader = repeater(75, fourSpawnpad, 0);
const spikePlacer = repeater(86, () => {place(spikeType)}, 0);
const millPlacer = repeater(78, trimill, 100);
const turretPlacer = repeater(72, () => {place(turretType)}, 0);

document.addEventListener('keydown', (e)=>{
    spikePlacer.start(e.keyCode);
    fourSpawnpader.start(e.keyCode);
    healer2.start(e.keyCode);
    boostPlacer.start(e.keyCode);
    millPlacer.start(e.keyCode);
    turretPlacer.start(e.keyCode);

    let normalDashPacket = new Uint8Array([135, 102, 37, 116, 94, 162, 44, 210, 28, 223, 1, 13, 113, 180]);


        if (e.keyCode == 46) {
            ws.oldSend(normalDashPacket);
            doNewSend(["ch", ["Dash?"]]);
        }

      if (e.keyCode == 67 && document.activeElement.id.toLowerCase() !== 'chatbox') {
       doNewSend(["ch", [""]]);
           hat(6);
           acc(21);
   }

    if (e.keyCode == 50 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        if (secondary == 9 && Q2 == true) {
            Q2 = false;
            Q = false;
            setTimeout( () => {
                Q2 = true;
                Q = true;
            }, 300);
        }
    }
    if (e.keyCode == 50 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        if (secondary == 12 && Q2 == true) {
            Q2 = false;
            Q = false;
            setTimeout( () => {
                Q2 = true;
                Q = true;
            }, 300);
        }
    }
    if (e.keyCode == 50 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        if (secondary == 13 && Q2 == true) {
            Q2 = false;
            Q = false;
            setTimeout( () => {
                Q2 = true;
                Q = true;
            }, 300);
        }
    }
    if (e.keyCode == 50 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        if (secondary == 15 && Q2 == true) {
            Q2 = false;
            Q = false;
            setTimeout( () => {
                Q2 = true;
                Q = true;
            }, 300);
        }
    }
    if (e.keyCode == 50 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        if (secondary == 10 && Q2 == true) {
            Q2 = false;
            Q = false;
            setTimeout( () => {
                Q2 = true;
                Q = true;
            }, 300);
        }
    }
    if (e.keyCode == 49 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        if (primary == 4 && Q2 == true) {
            Q2 = false;
            Q = false;
            setTimeout( () => {
                Q2 = true;
                Q = true;
            }, 300);
        }
    }
    if (e.keyCode == 49 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        if (primary == 5 && Q2 == true) {
            Q2 = false;
            Q = false;
            setTimeout( () => {
                Q2 = true;
                Q = true;
            }, 300);
        }
    }
    if (e.keyCode == 77 && document.activeElement.id.toLowerCase() !=='chatbox') {
        if (lagInsta == false) {
            NormalInsta = false;
            lagInsta = true;
            doNewSend(["ch", ["Lags: ON"]]);
        } else {
            NormalInsta = true;
            lagInsta = false;
            doNewSend(["ch", ["Lags: OFF"]]);
        }
    }

    if (e.keyCode == 82 && Q2 == true && document.activeElement.id.toLowerCase() !== 'chatbox') {
        Q2 = false;
        Q = false;
        setTimeout( () => {
            Q = true;
        }, 500);
    }

    if(e.keyCode == 82 && NormalInsta == true && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(["ch", ["see ya chump"]]);
            autoprimary = true;
            autosecondary = false;
            autoaim = true;
            autoprimary = true;
            autosecondary = false;
            doNewSend(["13c", [0, 0, 1]]);
            doNewSend(["5", [primary, true]]);
            doNewSend(["7", [1]]);
            doNewSend(["13c", [1, 7, 0]]);
            doNewSend(["13c", [0, 7, 0]]);
        setTimeout( () => {
            autoprimary = false;
            autosecondary = true;
            doNewSend(["13c", [0, 0, 0]]);
            doNewSend(["13c", [1, 53, 0]]);
            doNewSend(["13c", [0, 53, 0]]);
            doNewSend(["5", [secondary, true]]);
        }, 77);
        setTimeout( () => {
            doNewSend(["13c", [0, 0, 0]]);
            doNewSend(["7", [1]]);
            doNewSend(["5", [primary, true]]);
            doNewSend(["13c", [0, 11, 1]]);
            if (myPlayer.y < 2400){
                doNewSend(["13c", [0, 15, 0]]);
            } else if (myPlayer.y > 6850 && myPlayer.y < 7550){
                doNewSend(["13c", [0, 31, 0]]);
            } else {
                doNewSend(["13c", [0, 12, 0]]);
            }
            autosecondary = false;
            autoaim = false;
        }, 200);
    }
    if(e.keyCode == 82 && lagInsta == true && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(["ch", ["Lag!"]]);
        autoprimary = true;
        autosecondary = false;
        autoaim = true;
        autoprimary = true;
        autosecondary = false;
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["5", [primary, true]]);
        doNewSend(["7", [1]]);
        doNewSend(["13c", [1, 7, 0]]);
        doNewSend(["13c", [0, 7, 0]]);
        setTimeout( () => {
            autoprimary = false;
            autosecondary = true;
            doNewSend(["13c", [0, 0, 0]]);
            doNewSend(["13c", [1, 53, 0]]);
            doNewSend(["13c", [0, 53, 0]]);
            doNewSend(["5", [secondary, true]]);
            doNewSend(["c", [1]]);
            doNewSend(["2", [nearestEnemyAngle]]);
            ws.oldSend(normalDashPacket);
        }, 100);
        setTimeout( () => {
            doNewSend(["13c", [0, 0, 0]]);
            doNewSend(["7", [1]]);
            doNewSend(["c", [0]]);
            doNewSend(["5", [primary, true]]);
            doNewSend(["13c", [0, 11, 1]]);
            if (myPlayer.y < 2400){
                doNewSend(["13c", [0, 15, 0]]);
            } else if (myPlayer.y > 6850 && myPlayer.y < 7550){
                doNewSend(["13c", [0, 31, 0]]);
            } else {
                doNewSend(["13c", [0, 20, 0]]);
            }
            autosecondary = false;
            autoaim = false;
        }, 223);
    }
  if (e.keyCode == 70 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        place(boostType, myPlayer.dir + toRad(0));
        place(boostType, myPlayer.dir - toRad(90));
        place(boostType, myPlayer.dir + toRad(180));
        place(boostType, myPlayer.dir - toRad(270));
    }
    if(e.keyCode == 90 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        click = true;
        if(myPlayer.hat !== 40) {
            hat(40);
            acc(19);
        }
    }

            if (e.keyCode == 101 && document.activeElement.id.toLowerCase() !== "chatbox") {
        if (wd == false) {
            wd = true;
            doNewSend(["ch", ["WD: ON"]]);
        } else {
            wd = false;
            doNewSend(["ch", ["WD: OFF"]]);

        }
    }

        if (e.keyCode == 45) {
         setTimeout(() => {
            doNewSend(["13c", [1, 7,0]]);
            doNewSend(["13c", [1, 53, 0]]);
            doNewSend(["13c", [1, 6,0]]);
            doNewSend(["13c", [1, 40, 0]]);
            doNewSend(["13c", [1, 15, 0]]);
            doNewSend(["13c", [1, 31, 0]]);
            doNewSend(["13c", [1, 12, 0]]);
            doNewSend(["13c", [1, 21, 0]]);
            doNewSend(["13c", [1, 22, 0]]);
            doNewSend(["13c", [1, 20, 0]]);
            doNewSend(["13c", [1, 11, 0]])
            doNewSend(["13c", [1, 52, 0]]);
            doNewSend(["13c", [1, 26, 0]]);
            doNewSend(["13c", [1, 56, 0]]);
            doNewSend(["13c", [1, 11, 1]]);
            doNewSend(["13c", [1, 17, 1]]);
            doNewSend(["13c", [1, 21, 1]]);
            doNewSend(["13c", [1, 19, 1]]);
            doNewSend(["13c", [1, 18, 1]]);
            doNewSend(["13c", [1, 13, 1]]);
             doNewSend(["ch", ["AutoBuy"]]);
        }, 0);
    }

    if (e.keyCode == 220 && document.activeElement.id.toLowerCase() !=='chatbox') {
        if (spin == false) {
            spin = true;
            doNewSend(["ch", ["AutoSpin: ON"]]);
        } else {
            spin = false;
            doNewSend(["ch", ["AutoSpin: OFF"]]);
        }
    }

    if (e.keyCode == 96 && document.activeElement.id.toLowerCase() !== "chatbox") {
        if (vsmod == false) {
            vsmod = true;
            hatToggle = false;
            doNewSend(["ch", ["MeleeMod = True"]]);
        } else {
            vsmod = false;
            hatToggle = true;
            doNewSend(["ch", ["MeleeMod = false"]]);

        }
    }

    if (e.keyCode == 219 && document.activeElement.id.toLowerCase() !== "chatbox") {
        if (hit360 == false) {
            hit360 = true;
            doNewSend(["ch", ["360 Hit: ON"]]);
        } else {
            hit360 = false;
            doNewSend(["ch", ["360 Hit: OFF"]]);

        }
    }

    if(e.keyCode == 71 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(["5", [primary, true]]);
        click = true;
        if(myPlayer.hat !== 7) {
            hat(7);
            hat(53);
            acc(18);
        }
    }

            if (e.keyCode == 100 && document.activeElement.id.toLowerCase() !== "chatbox") {
        if (autobreak == false) {
            autobreak = true;
            doNewSend(["ch", ["AutoBreak: ON"]]);
        } else {
            autobreak = false;
            doNewSend(["ch", ["AutoBreak: OFF"]]);

        }
    }

            if (e.keyCode == 98 && document.activeElement.id.toLowerCase() !== "chatbox") {
        if (antibull == false) {
            antibull = true;
            doNewSend(["ch", ["AB: ON"]]);
        } else {
            antibull = false;
            doNewSend(["ch", ["AB: OFF"]]);

        }
    }

            if (e.keyCode == 99 && document.activeElement.id.toLowerCase() !== "chatbox") {
        if (autospike == false) {
            autospike = true;
            doNewSend(["ch", ["AS: ON"]]);
        } else {
            autospike = false;
            doNewSend(["ch", ["AS: OFF"]]);

        }
    }

    if (e.keyCode == 16 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        fastest();
    }

    if(e.keyCode == 113 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        say('');
        hat(20);
        autoprimary = false;
        autosecondary = true;
        setTimeout( () => {
            say('');
            fastest();
            autosecondary = false;
            autoprimary = true;
            doNewSend(["5", [primary, true]]);
            setTimeout( () => {
                autoprimary = false;
            }, 100);
        }, 1675);
    }

    if(e.keyCode == 35 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(["6", [7]]);
        doNewSend(["6", [17]]);
        doNewSend(["6", [31]]);
        doNewSend(["6", [27]]);
        doNewSend(["6", [10]]);
        doNewSend(["6", [38]]);
        doNewSend(["6", [4]]);
        doNewSend(["6", [15]]);
    }

    if(e.keyCode == 36 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(["6", [5]]);
        doNewSend(["6", [17]]);
        doNewSend(["6", [31]]);
        doNewSend(["6", [23]]);
        doNewSend(["6", [9]]);
        doNewSend(["6", [38]]);
        doNewSend(["6", [28]]);
        doNewSend(["6", [15]]);
    }

    if(e.keyCode == 76 && document.activeElement.id.toLowerCase() !== 'chatbox') {
     autoaim = true;
        autosecondary = true;
        doNewSend(["13c", [0, 32, 0]]);
        doNewSend(["13c", [0, 21, 1]]);
        doNewSend(["13c", [0, 53, 0]]);
        doNewSend(["c", [1]]);

        setTimeout(() => {
            doNewSend(["13c", [0, 32, 19]]);
            doNewSend(["13c", [0, 21, 1]]);
            doNewSend(["13c", [0, 32, 0]]);
            doNewSend(["6", [12]]);
        }, 100);

        setTimeout(() => {
            doNewSend(["6", [15]]);
        }, 200);

        setTimeout(() => {
            doNewSend(["c", [0]]);
            doNewSend(["5", [primary, true]]);
            autosecondary = false;
            autoaim = false;
            doNewSend(["13c", [0, 11, 1]]);
            doNewSend(["13c", [0, 20, 0]]);
            setTimeout(() => {
                doNewSend(["5", [secondary, true]]);
                doNewSend(["13c", [1, 20, 0]]);
                doNewSend(["13c", [0, 20, 0]]);
                setTimeout(() => {
                    doNewSend(["5", [primary, true]]);
                    doNewSend(["13c", [0, 12, 0]]);
                }, 1750);
            }, 200);
        }, 300);
        }


})

document.addEventListener('keyup', (e)=>{
    spikePlacer.stop(e.keyCode);
    fourSpawnpader.stop(e.keyCode);
    boostPlacer.stop(e.keyCode);
    millPlacer.stop(e.keyCode);
    turretPlacer.stop(e.keyCode);
    healer2.stop(e.keyCode);

    if(e.keyCode == 90 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        click = false;
        if(isEnemyNear) {
        hat(6);
        acc(21);
        } else {
                hat(0);
            fastest();
        }
    }

    if(e.keyCode == 78 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        setTimeout( () => {
            doNewSend(["33", [null]]);
        }, 200);
    }

    if(e.keyCode == 71 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        click = false;
            setTimeout( () => {
                hat(11);
                acc(21);
            }, 10);
    }
})

function isElementVisible(e) {
    return (e.offsetParent !== null);
}

function fourSpawnpad() {
    place(spawnpadType, myPlayer.dir + toRad(135));
    place(spawnpadType, myPlayer.dir + toRad(150));
    place(spawnpadType, myPlayer.dir + toRad(165));
    place(spawnpadType, myPlayer.dir + toRad(180));
    place(spawnpadType, myPlayer.dir + toRad(270));
    place(spawnpadType, myPlayer.dir + toRad(360));
}

function toRad(angle) {
    return angle * 0.01745329251;
}

function dist(a, b){
    return Math.sqrt( Math.pow((b.y-a[2]), 2) + Math.pow((b.x-a[1]), 2) );
}

function update() {
    for (let i=0;i<9;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            primary = i;
        }
    }

    for (let i=9;i<16;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            secondary = i;
        }
    }

    for (let i=16;i<19;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            foodType = i - 16;
        }
    }

    for (let i=19;i<22;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            wallType = i - 16;
        }
    }

    for (let i=22;i<26;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            spikeType = i - 16;
        }
    }

    for (let i=26;i<29;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            millType = i - 16;
        }
    }

    for (let i=29;i<31;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            mineType = i - 16;
        }
    }

    for (let i=31;i<33;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            boostType = i - 16;
        }
    }

    for (let i=33;i<36;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            turretType = i - 16;
        }
    }

    for (let i=36;i<37;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            spawnpadType = i - 16;
        }
    }

    for (let i=37;i<39;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            turretType = i - 16;
        }
    }
}


setInterval ( () => {
    if(Q2 == true && myPlayer.hat != 6) {
        place(foodType);
        place(foodType);
    }
}, 130);

setInterval ( () => {
    if(Q2 == true && myPlayer.hat == 6) {
        place(foodType);
    }
}, 150);

var letping;
var setping;
setInterval(function() {
    letping = document.getElementById(null).innerHTML;
    if(letping.split(' ')[1] > 0 && letping.split(' ')[1] !== setping && document.activeElement.id.toLowerCase() !== 'chatbox') {
        say('High ping: ' + letping.split(' ')[1] + 'ms');
        letping = document.getElementById("null").innerHTML;
        setping = letping;
    } else {
        setping = 0;
    }
    document.getElementById("chatBox").placeholder = "";
    document.querySelector("#pre-content-container").style.display = "none";
    $("#ot-sdk-btn-floating").remove();
}, 200)

document.getElementById('chatBox').placeholder = "IDK v 10...";
document.getElementById("pingDisplay").style.color = "red";
document.getElementById('diedText').style.color = "...SAD...";
document.getElementById("gameName").innerHTML = "IDK v10";
document.getElementById("storeHolder").style = "height: 1500px; width: 450px;"

document.getElementById('adCard').remove();
document.getElementById('errorNotification').remove();


document.getElementById("IDK v10").style.color = "black";
document.getElementById("IDK YT").style = "text-shadow: #39FC1B 1px 1px 40px;";
document.getElementById("setupCard").style.color = "#0404B4";
document.getElementById("chatButton").remove();
$("#mapDisplay").css({background: `url('http://i.imgur.com/Qllo1mA.png')`});
$("#mapDisplay").css({
  'border-radious':'350px',
  'border':'2px solid #000000'
});
$("#errorNotification").hide();
$("#adCard").hide();
$(".menuHeader").hide();
$(".menuText").hide();
$(".ytLink").hide();
$("#youtuberOf").remove();
$("#followText").remove();
$("#twitterFollow").remove();
$("#adCard").remove();
$("#mobileInstructions").remove();
$("#promoImgHolder").remove();
$("#downloadButtonContainer").remove();
$("#mobileDownloadButtonContainer").remove();
$(".downloadBadge").remove();
$("div[style*='inline-block']").css('display', 'block');
$("div#menuCard.adCard").remove();
$("#youtuberOf").hide();
$("#followText").hide();
$("#twitterFollow").hide();
$("#youtubeFollow").hide();
$("#adCard").hide();
$("#mobileInstructions").hide();
$("#promoImgHolder").hide();
$("#downloadButtonContainer").hide();
$("#mobileDownloadButtonContainer").hide();
$(".downloadBadge").hide();
$("div[style*='inline-block']").css('display', 'block');
$("#moomooio_728x90_home").parent().css({display: "none"});
$("#consentBlock").css({display: "none"});
//$("#youtuberOf").css({display: "none"})
document.getElementById("moomooio_728x90_home").style.display = "none";
$("#moomooio_728x90_home").parent().css({display: "none"});

let kudru = true;

setInterval(() => {
    if(kudru == true) {
    }
},0);

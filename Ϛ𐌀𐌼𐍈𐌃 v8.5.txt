// ==UserScript==
// @name          Ϛ𐌀𐌼𐍈𐌃 TEST
// @namespace
// @version      v8.5
// @description  bozo
// @author       Hand
// @match        *://moomoo.io/*
// @match        *://sandbox.moomoo.io/*
// @match        *://moomoo.skids.info/*
// @icon        https://tenor.com/view/twerk-gif-18988951
// @grant        none
// @require https://greasyfork.org/scripts/368273-msgpack/code/msgpack.js?version=598723
// @require http://code.jquery.com/jquery-3.3.1.min.js
// @require https://code.jquery.com/ui/1a.12.0/jquery-ui.min.js
// @require https://cdnjs.cloudflare.com/ajax/libs/jquery-confirm/3.3.0/jquery-confirm.min.js
// @require https://greasyfork.org/scripts/368273-msgpack/code/msgpack.js?version=598723A
// @require http://code.jquery.com/jquery-3.3.1.min.js
// @require https://code.jquery.com/ui/1.12.0/jquery-ui.min.js
// @require https://cdnjs.cloudflare.com/ajax/libs/jquery-confirm/3.3.0/jquery-confirm.min.js
// @require https://cdn.jsdelivr.net/gh/emn178/js-sha3/build/sha3.min.js
// @require https://ksw2-center.glitch.me/users/fzb/msgpack.js
// @downloadURL none
// ==/UserScript==
(function() {
    'use strict';
requestAnimationFrame = (a) => setTimeout(a, 1e3/6000)
})();


document.getElementById("storeHolder").style = "height: 1500px; width: 450px;"

var ping = document.getElementById("pingDisplay");
ping.replaceWith(document.createElement("a"));
ping.style.fontSize = "10px";
ping.style.display = "block";
ping.style.zIndex = "1000000";
document.body.appendChild(ping);

    var kills = 10;

    setInterval(getkills, 250);

    function getkills(){
        var count = parseInt(document.getElementById("killCounter").innerText);
        if(count > kills){
        setTimeout(()=>{
            doNewSend(["ch", ["Lost players=>"+count+""]]);
        }, 80);
        setTimeout(()=>{
            doNewSend(["ch", ["+1$ from Nigga"]]);
        }, 700);
        }
        kills = count;
        }
    //more fps
    window.location.native_resolution = true;

//${generateNewToggle
var toggles = {};
window.toggles = toggles;
function generateNewToggle(label, id, isChecked, style) {
    toggles[id] = function () {
        return document.getElementById(id).checked;
    };
    return `
            ${label} <input type="checkbox" style="cursor: pointer;${
    style ? " " + style : ""
}" id="${id}" ${isChecked}>
            `;
}
//${generateNewList
function generateNewList(label, id, configs) {
    let content = `${label} <select id="${id}">`;
    for (let i = 0; i < configs.length; i++) {
        content += `<option value="${configs[i][0]}">${configs[i][1]}</option>`;
    }
    content += `</select>`;
    return content;
}
function setConfig(elements, id) {
    for(let i = 0; i < elements.length; i++) {
        document.getElementById(elements[i][3]).style.display = id == elements[i][0] ? "inline-block" : "none";
    }
}
function addEventListen(id, configs) {
    let interval = setInterval(() => {
        if(document.getElementById(id) != null) {
            document.getElementById(id).addEventListener("change", function() {
                setConfig(configs, document.getElementById(id).value);
            });
            clearInterval(interval);
        }
    }, 0);
}
function generateNewConfig(label, id, configs) {
    let content = `${label} <select id="${id}">`;
    for(let i = 0; i < configs.length; i++) {
        content += `<option value="${configs[i][0]}">${configs[i][1]}</option>`;
    }
    content += `</select>`;
    for(let i = 0; i < configs.length; i++) {
        content += generateNewToggle("", configs[i][3], configs[i][2], !i ? "display: inline-block;" : "display: none;");
    }
    addEventListen(id, configs);
    return content;
}
//menu css
$("body").append(`
           <div id="modmenu" style="display: block;
           padding: 10px;
           border-radius: 15px;
           background-color: rgba(0, 0, 0, 0.25);
           background: linear-gradient(#090c1c,#38c0ea,#9639e9);
           position: absolute;
           left: 20px;
           top: 20px;
           width: 375px;">
           </div>`);
//scroll wheel
$("#mainMenu").css({
    "overflow-y": "scroll",
});
//inside menu
$("#modmenu").append(`

           <div id="textHelp" style="border-radius:20px;"> <legend
           style = "font-size: 30px; text-align: center;"><br>CaMoD menu</legend>
           <div style="color: rgb(255, 255, 255);font-size: 15px; padding-left: 25px; max-height: 235px;">
           <br>


           ${generateNewList("Music: ", "chatType", [
    [0, "music"],
     [1, "invincible"],
            ])}

<br>
<div style="font-size:10px;">Music:invincible</div>
<br>
<br>
                          </div>
`);
document.addEventListener("keydown", event => {
    let key = event.key.toLowerCase();
    if (key == "escape") {
        $("#modmenu").toggle();
    }
});

// Erstellen Sie eine Audio-Instanz
const audio = new Audio();

// Verfolgen Sie den aktuellen Status der Musik
let isPlaying = false;

// Funktion zum Abspielen der Musik
function playMusic(url) {
  audio.src = url;
  audio.play();
  isPlaying = true;
  console.log("Musik wird abgespielt");
}

// Funktion zum Anhalten der Musik
function pauseMusic() {
  audio.pause();
  audio.currentTime = 0;
  isPlaying = false;
  console.log("Musik angehalten");
}
// Funktion zum Überprüfen und Steuern der Musik basierend auf der Taste und der ausgewählten Option
function handleKeyPress(event, selectedOption) {
  const key = event.key;
  if (key === "p" || key === "P") {
    if (selectedOption === "Egzod - No Rival") {
      const musicUrl = "https://rur.hitmotop.com/get/music/20190522/K-391_-_Earth_64401829.mp3";
      if (isPlaying) {
        pauseMusic();
      } else {
        playMusic(musicUrl);
      }
    }
  }
}

// Beispielaufruf der Funktion für die Tastatureingabe und die Optionenauswahl
let selectedOption = "Egzod - No Rival";

// Funktion zum Aktualisieren der ausgewählten Option
function updateSelectedOption(option) {
  selectedOption = option;
}

// Beispielaufruf der Funktion für die Tastatureingabe
document.addEventListener("keydown", (event) => handleKeyPress(event, selectedOption));








            var singing = {
                audio: null,
                name: "",
                toggle: false,
                start: 0,
                stop: 0,
                index: 0,
            };
            var songs = [{
                name: "zerkalo",
                src: "https://rur.hitmotop.com/get/music/20190522/K-391_-_Earth_64401829.mp3",
                sync: {
                    "12:679": "Here and now",
                    "13:730": "you're coming up to me",
                    "15:197": "'Fore I'm lighting up the sky",
                    "18:565": "Feel the ground",
                    "19:855": "shaking underneath",
                    "21:346": "Tryna take me alive",
                    "24:415": "Oh-oh-oh-oh-oh-oh-oh",
                    "26:906": "Get ready for the fallout",
                    "30:357": "Oh-oh-oh-oh-oh-oh-oh",
                    "33:26": "Can't stop me now",
                    "35:154": "I got no rival",
                    "37:463": "I'ma find my way",
                    "39:615": "Through the blood and pain",
                    "41:162": "Game of survival",
                    "43:463": "Any time or place",
                    "45:577": "Watch 'em run away",
                    "47:337": "I got no-",
                    "49:78": "I'll be standing on my own",
                    "51:259": "Never gonna take my thrown",
                    "53:389": "I got no rival",
                    "55:349": "Watch 'em run away",
                    "57:320": "I got no, no, no",
                    "58:789": "I got no, no, no rival",
                    "1:0:227": "No rival",
                    "1:11:329": "No rival",
                    "1:17:295": "No Rival",
                    "1:24:694": "Tell them now what you gon' do",
                    "1:27:265": "We can do this face-to-face",
                    "1:30:316": "Reckoning is coming real soon",
                    "1:33:254": "Doesn't matter what you say",
                    "1:36:175": "Tryna tell you",
                    "1:37:203": "listen to the moment",
                    "1:38:512": "Can't take mine 'cause I own it",
                    "1:42:714": "Don't you know that",
                    "1:43:869": "I'm locked and I'm loaded?",
                    "1:45:389": "You're out of focus",
                    "1:48:202": "Oh-oh-oh-oh-oh-oh-oh",
                    "1:51:61": "Get ready for the fallout",
                    "1:54:362": "Oh-oh-oh-oh-oh-oh-oh",
                    "1:56:885": "Can't stop me now",
                    "1:59:205": "I got no rival",
                    "2:1:383": "I'ma find my way",
                    "2:3:722": "Through the blood and pain",
                    "2:5:242": "Game of survival",
                    "2:7:461": "Any time or place",
                    "2:9:631": "Watch 'em run away",
                    "2:11:210": "I got no-",
                    "2:12:959": "I'll be standing on my own",
                    "2:15:221": "Never gonna take my throne",
                    "2:17:141": "I got no rival",
                    "2:19:351": "Watch 'em run away",
                    "2:21:221": "I got no, no, no",
                    "2:22:770": "I got no, no, no rival",
                    "2:24:149": "No rival",
                    "2:29:116": "No rival",
                    "2:33:194": "I got no, no, no",
                    "2:34:695": "I got no, no, no rival",
                    "2:41:239": "No rival",
                    "2:59:204": "No rival",
                },
                        }];
            let converToJSDelay = (time) => {
                let newTime = time.split(":").reverse();
                time = 0;
                let convert = [6e4 * 60, 6e4, 1000, 1].reverse();
                newTime.forEach((b, c) => {
                    time += b * convert[c];
                });
                return time;
            };
            songs.forEach(e => {
                let oldDatas = e.sync;
                e.sync = {};
                for (let time in oldDatas) {
                    e.sync[converToJSDelay(time)] = oldDatas[time];
                }
            });
            var autoGrindHotkey = {
                toggle: false,
                last: 0,
            };

(function() {
    let errorText = "arguments bro..."

    function setLS(key, value = void 0) {
        if (!key) return console.log(errorText)

        return localStorage.setItem(key, JSON.stringify(value))
    }

    function getLS(key) {
        if (!key) return console.log(errorText)

        try {
            return JSON.parse(localStorage.getItem(key))
        } catch {
            return localStorage.getItem(key)
        }
    }

    function isGUIDisabled() {
        if (!["allianceinput", 'chatbox', 'nameinput'].includes(document.activeElement.id.toLowerCase())) {
            return true
        }

        return false
    }

    let gameGrid = (typeof getLS("gameGrid") !== "undefined" ? getLS("gameGrid") : true)

    function createElement(tag, action, node = document.body) {
        if (!tag || !action) return console.log(errorText)

        let element = document.createElement(tag)

        action(element, element.style)

        node.appendChild(element)
    }

    createElement("div", (element, style) => {
        element.id = "toggler-holder"
        style.display = "flex"
        style.pointerEvents = "none"
        style.width = "100%"
        style.height = "100%"
        style.justifyContent = "center"
        style.alignItems = "center"
        style.position = "absolute"
        style.top = "0px"
        style.zIndex = "999999999999999"
    })

    if (document.getElementById("toggler-holder")) {
        document.getElementById("toggler-holder").style.display = "none"

        let togglerCode = `
        <div class="single-chart">
          <svg viewBox="0 0 36 36">
            <path class="circle" stroke-dasharray="0, 100" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" />
            <text x="18" y="17.35" class="percentage">Toggler Game Grid</text>
            <text x="18" y="20.35" class="percentage" id="percToggle" style="fill: #adadad;">0%</text>
          </svg>
        </div>
        <style>
        .single-chart {
          display: flex;
          width: 50%;
          justify-content: space-around;
        }

        .circle {
          fill: rgb(28 28 28 / 70%);
          stroke: #eee;
          stroke-width: .5;
          stroke-linecap: round;
          animation: progress 1s ease-out forwards;
        }

        @keyframes progress {
          0% {
            stroke-dasharray: 0 100;
          }
        }

        .percentage {
          fill: #eee;
          font-size: 2px;
          text-anchor: middle;
        }
        </style>
        `
        document.getElementById("toggler-holder").innerHTML = togglerCode
    }

    let togglerOffset = 0

    function resetToggler() {
        keys[191] = false
        activeToggler = false
        togglerOffset = 0
        document.getElementById("toggler-holder").style.display = "none"
        document.querySelector(".circle").style.strokeDasharray = [0, 100]
    }

    function toggleGameGrid() {
        document.getElementById("toggler-holder").style.display = "flex"

        togglerOffset += 2
        activeToggler = true

        document.querySelector(".circle").style.strokeDasharray = [togglerOffset, 100]
        document.getElementById("percToggle").innerHTML = togglerOffset + "%"

        if (togglerOffset >= 100) {
            gameGrid = !gameGrid
            setLS("gameGrid", gameGrid)
            resetToggler()
        }
    }

    let keys = []
    let activeToggler = false
    let node = document || document.getElementById("gameCanvas") || window

    node.addEventListener("keydown", (event) => {
        if (!isGUIDisabled()) return null

        keys[event.keyCode] = true
    })

    node.addEventListener("keyup", (event) => {
        keys[event.keyCode] = false
    })

    let { maxScreenWidth, maxScreenHeight } = window.config
    let { lineTo, moveTo, clearRect } = CanvasRenderingContext2D.prototype
    let gridAlpha = 0.06

    CanvasRenderingContext2D.prototype.clearRect = function(x, y, width, height) {
        if (keys[191]) {
            toggleGameGrid()
        } else {
            if (activeToggler) {
                resetToggler()
            }
        }

        return clearRect.apply(this, arguments)
    }

    CanvasRenderingContext2D.prototype.moveTo = function(x, y) {
        if (!gameGrid) {
            if (this.globalAlpha == gridAlpha) {
                return void 0
            } else {
                return moveTo.call(this, x, y)
            }
        }

        return moveTo.apply(this, arguments)
    }

    CanvasRenderingContext2D.prototype.lineTo = function(x, y) {
        if (!gameGrid) {
            if (y == maxScreenHeight || x == maxScreenWidth) {
                if (this.globalAlpha == gridAlpha) {
                    return void 0
                } else {
                    return lineTo.call(this, x, y)
                }
            } else {
                return lineTo.call(this, x, y)
            }
        }

        return lineTo.apply(this, arguments)
    }
})()
       $("#mapDisplay").css({background: `url('https://miuki.info/wp-content/uploads/2010/04/serious-business.png')`});
document.title = "[R-insta]_[T-reverse]_[C-1tick]_[Y-1frame]_[G-bowinsta]_[Space-spikeinsta]_[ё-hatloop]_[ctrl-autoGG]_[M-mills]_[= autobuy]_[P-music]_[F9-Grid]"
    document.getElementById("gameName").outerHTML='<div id="gameName" style="padding: 40px;">\n   <span style="text-shadow: none">Ca</span><span style="text-shadow: none;color: black;background: url(&quot;https://htmlcolorcodes.com/assets/images/colors/orange-color-solid-background-1920x1080.png&quot;);border-radius: 60px;background-size: 300px 100px;">MoD</span>\n</div>';
document.getElementById("woodDisplay").style.color = "#ffff57";
document.getElementById("stoneDisplay").style.color = "#ffff57";
document.getElementById("killCounter").style.color = "#ffff57";
document.getElementById("foodDisplay").style.color = "#ffff57"
document.getElementById("scoreDisplay").style.color = "#ffff57";
(function() {
    var Mill1;
    var Mill2;
    var Mill3;
    var MillMod = true;
document.addEventListener('keydown', function(e) {
        if (e.keyCode == 81 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        AutoMill = (AutoMill + 1) % 2;
            if (AutoMill == 0) {
            }else {
            }
                e.preventDefault();
                if (MillMod) {
                    Mill1 = setTimeout(function() {
                        h1();
                    }, 0);
                } else {
                    clearTimeout(Mill1);
                    clearTimeout(Mill2);
                    clearTimeout(Mill3);
                                    }
                MillMod = !MillMod;
            }
        }
    );



    function h1() {
        clearTimeout(Mill1);
        place(spikeType, myPlayer.dir + toRad(180));
        place(spikeType, myPlayer.dir - toRad(0));
        Mill1 = setTimeout(function() {
            h1();
        }, 210);
    }
})();


window.onbeforeunload = null;

let mouseX;
let mouseY;

let width;
let height;


var antiinsta = true
var autobuy = false
var autogrind = false
var autoFrozenMill = false
var AutoInsta = false

let spin = false;
let dirSpin = 0;
let sync = false;
setInterval(()=>{
    if(spin == true){
        doNewSend(["5", [primary, true]]);
        doNewSend(["13c", [0, 7, 0]]);
        doNewSend(["13c", [0, 18, 1]]);
        setTimeout(() => {
            doNewSend(["13c", [0, 11, 0]]);
            doNewSend(["13c", [0, 21, 1]]);
        }, 150);
        setTimeout(() => {
            doNewSend(["13c", [0, 53, 0]]);
            doNewSend(["13c", [0, 16, 1]]);
        }, 250);
    }
}, 450);


setInterval( () =>{
if(autogrind == true){
setTimeout(() => {
doNewSend(["13c", [0, 40, 0]]);
            doNewSend(["13c", [0, 11, 1]]);
            doNewSend(["c", [1]]);
                                }, 10);
              doNewSend(["c", [1]]);
            place(turretType,myPlayer.dir + toRad(45));
            place(turretType,myPlayer.dir - toRad(45));
            place(turretType,myPlayer.dir - toRad(0));
                        }
                    }, 250);

setInterval(() => {
    if(autoFrozenMill==true) {
        place(millType, myPlayer.dir + toRad(78));
        place(millType, myPlayer.dir - toRad(78));
        place(millType, myPlayer.dir - toRad(0));
    }
}, 450);

setInterval( () => {
     if(autobuy == true) {
    doNewSend(["13c", [1, 22, 0]]);
     doNewSend(["13c", [1, 6, 0]]);
      doNewSend(["13c", [1, 7, 0]]);
       doNewSend(["13c", [1, 12, 0]]);
        doNewSend(["13c", [1, 53, 0]]);
         doNewSend(["13c", [1, 40, 0]]);
          doNewSend(["13c", [0, 11, 1]]);
           doNewSend(["13c", [0, 18, 1]]);
            doNewSend(["13c", [0, 15, 1]]);
             doNewSend(["13c", [0, 31, 1]]);
              doNewSend(["13c", [0, 56, 1]]);
                                             }
}, 350);

var ABO = false
setInterval( () => {
    if(ABO) {
        if(nearestEnemy) {
            nearestEnemyAngle = Math.atan2(nearestEnemy[2]-myPlayer.y, nearestEnemy[1]-myPlayer.x);
            if(Math.sqrt(Math.pow((myPlayer.y-nearestEnemy[2]), 2) + Math.pow((myPlayer.x-nearestEnemy[1]), 2)) < 500) {
        place(boostType, myPlayer.dir - toRad(0));
        setTimeout(() => {
        place(boostType, myPlayer.dir - toRad(0));
           }, 130);
        } else if (Math.sqrt(Math.pow((myPlayer.y-nearestEnemy[2]), 2) + Math.pow((myPlayer.x-nearestEnemy[1]), 2)) < 200) {
        place(spikeType, myPlayer.dir + toRad(90));
        place(spikeType, myPlayer.dir - toRad(90));
        place(spikeType, myPlayer.dir + toRad(90));
        place(spikeType, myPlayer.dir - toRad(90));
            }
        }
    }
}, 1000);
setInterval( () => {
    if(AutoInsta) {
        if(nearestEnemy) {
            nearestEnemyAngle = Math.atan2(nearestEnemy[2]-myPlayer.y, nearestEnemy[1]-myPlayer.x);
            if(Math.sqrt(Math.pow((myPlayer.y-nearestEnemy[2]), 2) + Math.pow((myPlayer.x-nearestEnemy[1]), 2)) < 90) {
           aim(Math.cos(dirSpin)*document.body.clientWidth, Math.sin(dirSpin)*document.body.clientHeight);
        autoaim = true;
        doNewSend(["5", [primary, true]]);
        doNewSend(["13c", [1, 12, 0]]);
        doNewSend(["13c", [0, 12, 0]]);
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["13c", [0, 18, 1]]);
        place(spikeType, myPlayer.dir + toRad(90));
        place(spikeType, myPlayer.dir - toRad(90));
        place(spikeType, myPlayer.dir - toRad(0));
        place(spikeType, myPlayer.dir - toRad(180));
            autoaim = false;
            AutoInsta = false;
            }
        }
    }
}, 1);

setInterval(() => {
    if(autoaim == true) {
        doNewSend(["2", [nearestEnemyAngle]]);
    }
}, 0);

setInterval(() => {
    if(hatToggle == 1) {
        if(oldHat != normalHat) {
            hat(normalHat);
            console.log("Tried. - Hat")
        }
        if(oldAcc != normalAcc) {
            acc(normalAcc);
            console.log("Tried. - Acc")
        }
        oldHat = normalHat;
        oldAcc = normalAcc
    }
}, 25);

function normal() {
    hat(normalHat);
    acc(normalAcc);
}

function aim(x, y){
     var cvs = document.getElementById("gameCanvas");
     cvs.dispatchEvent(new MouseEvent("mousemove", {
         clientX: x,
         clientY: y

     }));
}

let coreURL = new URL(window.location.href);
window.sessionStorage.force = coreURL.searchParams.get("fc");

const CanvasAPI = document.getElementById("gameCanvas")
CanvasAPI.addEventListener("mousedown", buttonPressD, false);
    function buttonPressD(e) {
    if (e.button == 2 ) {
        hat(40);
        acc(21);
        setTimeout( () => {
               hat(6);
             }, 100);
    }
        if (e.button == 1) {
        doNewSend(["5", [primary, true]]);
        hat(7);
        acc(21)
          setTimeout( () => {
         doNewSend(["6", [5]]);//polearm
             }, 70);
          setTimeout( () => {
        hat(6);
        }, 1110);
        }
        if (e.button == 0) {
        doNewSend(["5", [primary, true]]);
        hat(7);
        acc(18)
        setTimeout( () => {
        hat(12)
        }, 110);
        }
 }
let vengeance = 0;
let trap_a = null;
let intrap = false;
let trapid = null;
let trap = {
    x: 0,
    y: 0
}
var AutoMill = 0;
var nearestEnemy;
var nearestEnemyAngle;
var autobreak = false;
var isEnemyNear;
var instaSpeed=200;
var primary;
var secondary;
var foodType;
var wallType;
var spikeType;
var millType;
var mineType;
var boostType;
var turretType;
var spawnpadType;
var autoaim = false;
var tick = 1;
var oldHat;
var oldAcc;
var enemiesNear;
var normalHat;
var normalAcc;
var ws;
var msgpack5 = msgpack;
var boostDir;
let myPlayer = {
    id: null,
    x: null,
    y: null,
    dir: null,
    object: null,
    weapon: null,
    clan: null,
    isLeader: null,
    hat: null,
    accessory: null,
    isSkull: null
};
let EnemyPlayer = {
    id: null,
    x: null,
    y: null,
    dir: null,
    object: null,
    weapon: null,
    clan: null,
    isLeader: null,
    hat: null,
    accessory: null,
    isSkull: null
};

let healSpeed = 100;

var messageToggle = 0;
var clanToggle = 0;
let ab = 0;
let ai = 0;
let healToggle = 1;
let hatToggle = 1;
var PREFIX = "!";
var PRFX = ".";

document.msgpack = msgpack;
function n(){
     this.buffer = new Uint8Array([0]);
     this.buffer.__proto__ = new Uint8Array;
     this.type = 0;
}

WebSocket.prototype.oldSend = WebSocket.prototype.send;
WebSocket.prototype.send = function(m){
    if (!ws){
        document.ws = this;

        ws = this;
        socketFound(this);
    }
    this.oldSend(m);
};
function socketFound(socket){
    socket.addEventListener('message', function(message){
        handleMessage(message);
    });
}
function handleMessage(m){
    let temp = msgpack5.decode(new Uint8Array(m.data));
    let data;
    if(temp.length > 1) {
        data = [temp[0], ...temp[1]];
        if (data[1] instanceof Array){
            data = data;
        }
    } else {
      data = temp;
    }
    let item = data[0];
    if(!data) {return};

        if (data[0] == "ch" && data[1] == myPlayer.id && data[2].split(' ') == PREFIX+"bow") {
        autoaim = true;
                    doNewSend(["13c", [0, 53, 0]]);
                doNewSend(["5", [secondary, true]]);
                doNewSend(["7", [2]]);
    setTimeout(() => {
        doNewSend(["6", [12]]);
    },80);
    setTimeout(() => {
        doNewSend(["6", [13]]);
    }, 160); // 160
    setTimeout(() => {
        doNewSend(["5", [primary, true]]);
        doNewSend(["7", [1]]);
       doNewSend(["13c", [0, 6, 0]]);
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["13c", [0, 21, 1]]);
            setTimeout(() => {
                autoaim = false;
                    }, 10); // 160
    }, 280);
    }
      if (myPlayer.kills < 1) {
                doNewSend(["ch", ["first kill"]]);
    }
    if (data[0] == "ch" && data[1] == myPlayer.id && data[2].split(' ')[0] == PREFIX+"left") {
        setTimeout(() => {
            doNewSend(["9", [null]])
        },500);
    }
        if (data[0] == "ch" && data[1] == myPlayer.id && data[2].split(' ') == PREFIX+"1frame") {
                                   setTimeout( () => {
                doNewSend(["6", [5]]);//polearm
                                }, 110);
                        setTimeout( () => {
                doNewSend(["6", [17]]);//cookie
                              }, 110);
                             setTimeout( () => {
                doNewSend(["6", [31]]);//trap
                         }, 110);
            setTimeout( () => {
                doNewSend(["6", [27]]);//better mill
                 }, 110);
             setTimeout( () => {
                doNewSend(["6", [10]]);//great hammer
                 }, 110);
            setTimeout( () => {
                doNewSend(["6", [38]]);//tp
                 }, 110);
        }

        if (data[0] == "ch" && data[1] == myPlayer.id && data[2].split(' ') == PREFIX+"SM") {
                                    setTimeout( () => {
                doNewSend(["6", [3]]);//polearm
                                }, 110);
                        setTimeout( () => {
                doNewSend(["6", [17]]);//cookie
                                        }, 110);
                                    setTimeout( () => {
                doNewSend(["6", [31]]);//trap
                                    }, 110);
                          setTimeout( () => {
                doNewSend(["6", [27]]);//better mill
                          }, 110);
                                                setTimeout( () => {
                doNewSend(["6", [9]]);//great hammer
                                   }, 110);
              setTimeout( () => {
                doNewSend(["6", [38]]);//tp
                  doNewSend(["ch", ["AutoUpgrade: On"]]);
                     }, 110);
                                    }

    if(item === "io-init") {
            let cvs = document.getElementById("gameCanvas");
            width = cvs.clientWidth;
            height = cvs.clientHeight;
            $(window).resize(function() {
                width = cvs.clientWidth;
                height = cvs.clientHeight;
            });
            cvs.addEventListener("mousemove", e => {
                mouseX = e.clientX;
                mouseY = e.clientY;
            });
        }
    function chat(e) {
    doNewSend(["ch", [e]])
}
var antiinsta = true
    if (item == 'h' && data[1] == myPlayer.id) {
        if (data[2] <= 21 && data[2] > 0 && antiinsta == true) {
            place(foodType);//eat Bobik
        }
        if (data[2] <= 50 && data[2] > 0 && antiinsta == true) { //60
            place(foodType);//eat Bobik
        }
    }
    if (item == "1" && myPlayer.id == null){
        myPlayer.id = data[1];
    }


    if (item == "33") {
        enemiesNear = [];
        for(let i = 0; i < data[1].length / 13; i++) {
            let playerInfo = data[1].slice(13*i, 13*i+13);
            if(playerInfo[0] == myPlayer.id) {
                myPlayer.x = playerInfo[1];
                myPlayer.y = playerInfo[2];
                myPlayer.dir = playerInfo[3];
                myPlayer.object = playerInfo[4];
                myPlayer.weapon = playerInfo[5];
                myPlayer.clan = playerInfo[7];
                myPlayer.isLeader = playerInfo[8];
                myPlayer.hat = playerInfo[9];
                myPlayer.accessory = playerInfo[10];
                myPlayer.isSkull = playerInfo[11];
            } else if(playerInfo[7] != myPlayer.clan || playerInfo[7] === null) {
                enemiesNear.push(playerInfo);
            }
        }
    }

    isEnemyNear = false;
    if(enemiesNear) {
        nearestEnemy = enemiesNear.sort((a,b) => dist(a, myPlayer) - dist(b, myPlayer))[0];
    }

    if(nearestEnemy) {
        nearestEnemyAngle = Math.atan2(nearestEnemy[2]-myPlayer.y, nearestEnemy[1]-myPlayer.x);
        if(Math.sqrt(Math.pow((myPlayer.y-nearestEnemy[2]), 2) + Math.pow((myPlayer.x-nearestEnemy[1]), 2)) < 300) {
            isEnemyNear = true;
            if(autoaim == true && myPlayer.hat != 7 && myPlayer.hat != 53) {
                normalHat = 6;
                if(primary != 8) {
                    normalAcc = 21
                }
            };
        }
    }
    if(isEnemyNear == false && autoaim == false) {
        normalAcc = 21;
        if (myPlayer.y < 2400){
            normalHat = 15;
        } else if (myPlayer.y > 6850 && myPlayer.y < 7550){
            normalHat = 31;
        } else {
	        normalHat = 6;
        }
    }
    if (!nearestEnemy) {
        nearestEnemyAngle = myPlayer.dir;
    }
    if(item == "h" && data[1] == myPlayer.id) {
        if(data[2] < 85 && data[2] > 0 && healToggle == 1) { // place  place(foodType);
            setTimeout( () => {
               place(foodType);
             }, healSpeed);
        }
    }
    update();

}
function doNewSend(sender){
    ws.send(new Uint8Array(Array.from(msgpack5.encode(sender))));
}

function acc(id) {
    doNewSend(["13c", [0, 0, 1]]);
    doNewSend(["13c", [0, id, 1]]);
}

function hat(id) {
    doNewSend(["13c", [0, id, 0]]);
}


function place(id, angle = Math.atan2(mouseY - height / 2, mouseX - width / 2)) {
    doNewSend(["5", [id, null]]);
    doNewSend(["c", [1, angle]]);
    doNewSend(["c", [0, angle]]);
    doNewSend(["5", [myPlayer.weapon, true]]);
}
function placeQ(id, angle = Math.atan2(mouseY - height / 2, mouseX - width / 2)) {
    doNewSend(["5", [id, null]]);
    doNewSend(["c", [1, angle]]);
    doNewSend(["c", [0, angle]]);
    doNewSend(["5", [myPlayer.weapon, true]]);
}
function healer() {
               place(foodType, null);
               place(foodType, null);
}
function fourSpawnpad() {
       place(spawnpadType, myPlayer.dir + toRad(135));
       place(spawnpadType, myPlayer.dir + toRad(150));
       place(spawnpadType, myPlayer.dir + toRad(165));
       place(spawnpadType, myPlayer.dir + toRad(180));
       place(spawnpadType, myPlayer.dir + toRad(195));
       place(spawnpadType, myPlayer.dir + toRad(210));
       place(spawnpadType, myPlayer.dir + toRad(225));
       place(spawnpadType, myPlayer.dir + toRad(240));
       place(spawnpadType, myPlayer.dir + toRad(255));
       place(spawnpadType, myPlayer.dir + toRad(270));
       place(spawnpadType, myPlayer.dir + toRad(285));
       place(spawnpadType, myPlayer.dir + toRad(300));
       place(spawnpadType, myPlayer.dir + toRad(315));
       place(spawnpadType, myPlayer.dir + toRad(330));
       place(spawnpadType, myPlayer.dir + toRad(345));
       place(spawnpadType, myPlayer.dir + toRad(360));
}
function boostSpike() {
    if(boostDir == null) {
        boostDir = nearestEnemyAngle;
    }
    place(spikeType, boostDir + toRad(90));
    place(spikeType, boostDir - toRad(90));
    place(boostType, boostDir - toRad(180));
    place(boostType, boostDir - toRad(0));
    doNewSend(["33", [boostDir]]);
}


var repeater = function(key, action, interval) {
    let _isKeyDown = false;
    let _intervalId = undefined;

    return {
        start(keycode) {
            if(keycode == key && document.activeElement.id.toLowerCase() !== 'chatbox') {
                _isKeyDown = true;
                if(_intervalId === undefined) {
                    _intervalId = setInterval(() => {
                        action();
                        if(!_isKeyDown){
                            clearInterval(_intervalId);
                            _intervalId = undefined;
                            console.log("claered");
                        }
                    }, interval);
                }
            }
        },

        stop(keycode) {
            if(keycode == key && document.activeElement.id.toLowerCase() !== 'chatbox') {
                _isKeyDown = false;
            }
        }
    };


}

const healer1 = repeater(51, () => {placeQ(foodType, boostDir);
                                    placeQ(foodType, boostDir)}, 90);
const healer2 = repeater(81, () => {placeQ(foodType, boostDir);
                                    placeQ(foodType, boostDir)}, 90);
const boostPlacer = repeater(70, () => {place(boostType)}, 50);
const spikePlacer = repeater(86, () => {place(spikeType)}, 50);
const millPlacer = repeater(78, () => {place(millType)}, 50);
const turretPlacer = repeater(72, () => {place(turretType)}, 50);
const fourSpawnpads = repeater(75, fourSpawnpad, 50);

document.addEventListener('keydown', (e)=>{
    spikePlacer.start(e.keyCode);
    healer1.start(e.keyCode);
    healer2.start(e.keyCode);
    boostPlacer.start(e.keyCode);
    fourSpawnpads.start(e.keyCode);
    millPlacer.start(e.keyCode);
    turretPlacer.start(e.keyCode);

    if (e.keyCode == 71 && document.activeElement.id.toLowerCase() !== 'chatbox') {
                autoaim = true;
                doNewSend(["5", [secondary, true]]);
                doNewSend(["7", [2]]);
                setTimeout(() => {
                doNewSend(["6", [12]]);
                doNewSend(["13c", [0, 53, 0]]);
                },100);
                    var sck = "";
                setTimeout(() => {
                doNewSend(["6", [15]]);
                   for(let i = 0; i < 865; i++){
                    let caas = new Uint8Array(140);
                    for(let i = 0; i <caas.length;i++){
                        caas[i] = Math.floor(Math.random()*5);
                        sck += caas[i]
                    }
                }
                ws.send(caas);
                }, 210); // 160
                setTimeout(() => {
                doNewSend(["5", [primary, true]]);
                doNewSend(["7", [1]]);
                doNewSend(["13c", [0, 6, 0]]);
                doNewSend(["13c", [0, 0, 1]]);
                doNewSend(["13c", [0, 21, 1]]);
                setTimeout(() => {
                autoaim = false;
                    }, 10); // 160
    }, 350);
    }
    if (e.keyCode == 16 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        if (myPlayer.y < 2400){
            hat(15);
            acc(11);
        } else if (myPlayer.y > 6850 && myPlayer.y < 7550){
            hat(31);
            acc(11);
        } else if (isEnemyNear == true){
            hat(6);
            acc(19);
        } else {
	        hat(12);
            acc(11);
        }
    }
    if (e.keyCode == 90 && document.activeElement.id.toLowerCase() !== 'chatbox') {
            hat(40);
        acc(21);
    }
    if (e.keyCode == 66 && document.activeElement.id.toLowerCase() !== 'chatbox') {
            hat(6);
            acc(19);
    }
    if (e.keyCode == 84 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        hat(22);
        acc(19);
    }
    if (e.keyCode == 74 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        hat(7);
        acc(18);
    }
    if (e.keyCode == 89 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        hat(11);
        acc(21);
    }
        if(e.keyCode == 17 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        AutoInsta = !AutoInsta
        doNewSend(["ch", ["AutoGG:" + AutoInsta]]);
    }
    if(e.keyCode == 187 && document.activeElement.id.toLowerCase() !== 'chatbox') {
    autobuy = !autobuy
  doNewSend(["ch", ["autobuy:" + autobuy]]);
    }
    if(e.keyCode == 120 && document.activeElement.id.toLowerCase() !== 'chatbox') {
      autogrind = !autogrind
    doNewSend(["ch", [autogrind]]);
    }

    if(e.keyCode == 77 && document.activeElement.id.toLowerCase() !== 'chatbox') {
    autoFrozenMill = !autoFrozenMill
    doNewSend(["ch", [autoFrozenMill]]);
    }
    if(e.keyCode == 192 && document.activeElement.id.toLowerCase() !== 'chatbox') {
     spin = !spin
     doNewSend(["ch", [spin]]);
    }

     if(e.keyCode == 119 && document.activeElement.id.toLowerCase() !== 'chatbox') {
    ABO = !ABO
  doNewSend(["ch", ["ABS :" + ABO]]);
    }
    // Lag insta
    if(e.keyCode == 84 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        autoaim = true;
        doNewSend(["13c", [0, 53, 0]]);
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["13c", [0, 21, 1]]);
        doNewSend(["5", [secondary, true]]);
        doNewSend(["c", [1]]);
                setTimeout( () => {
            doNewSend(["5", [primary, true]]);
            doNewSend(["13c", [0, 7, 0]]);
            doNewSend(["13c", [0, 0, 1]]);
            doNewSend(["13c", [0, 18, 1]]);
        }, 80);
        setTimeout( () => {
            doNewSend(["5", [primary, true]]);
            doNewSend(["c", [0, null]]);
            doNewSend(["13c", [1, 12, 0]]);
            doNewSend(["13c", [0, 12, 0]]);
            doNewSend(["13c", [0, 0, 1]]);
            doNewSend(["13c", [0, 11, 1]]);
            autoaim = false;
        }, 222);
    }
 //rev3insta
    if(e.keyCode == 67 && document.activeElement.id.toLowerCase() !== 'chatbox') {
    autoaim = true;
        doNewSend(["13c", [0, 0, 0]]);
        doNewSend(["13c", [0, 0, 18]]);
        place(boostType, nearestEnemyAngle);
        doNewSend(["13c", [1, 53, 0]]);
        doNewSend(["5", [secondary, true]]);
        doNewSend(["13c", [0, 53, 0]]);
        doNewSend(["7", [2]]);
        setTimeout(() => {
            doNewSend(["5", [primary, true]]);
            doNewSend(["13c", [1, 7, 0]]);
            doNewSend(["13c", [0, 7, 0]]);
        }, 90);
        setTimeout(() => {
            doNewSend(["13c", [0, 0, 0]]);
            doNewSend(["7", [1]]);
            doNewSend(["5", [primary, true]]);
            doNewSend(["13c", [0, 6, 0]]);
            doNewSend(["13c", [1, 6, 0]]);
            doNewSend(["13c", [0, 11, 1]]);
            doNewSend(["13c", [1, 11, 1]]);
            autoaim = false;
        }, 225);
    }
    //1 FraRme
        if (e.keyCode == 89 && document.activeElement.id.toLowerCase() !== 'chatbox') {
                 autoaim = true;
        doNewSend(["13c", [0, 0, 0]]);
        doNewSend(["13c", [0, 0, 18]]);
        doNewSend(["13c", [1, 53, 0]]);
        doNewSend(["13c", [0, 53, 0]]);
        doNewSend(["5", [primary, true]]);
        setTimeout(() => {
        doNewSend(["7", [2]]);
            doNewSend(["13c", [1, 7, 0]]);
            doNewSend(["13c", [0, 7, 0]]);
            doNewSend(["13c", [0, 21, 1]]);
            doNewSend(["13c", [1, 21, 1]]);
        }, 80);
                setTimeout(() => {
            doNewSend(["7", [1]]);
            doNewSend(["5", [primary, true]]);
            doNewSend(["13c", [0, 6, 0]]);
            doNewSend(["13c", [1, 6, 0]]);
            doNewSend(["13c", [0, 11, 1]]);
            doNewSend(["13c", [1, 11, 1]]);
            autoaim = false;
        }, 222);
        }
    //spike insta
        if(e.keyCode == 32 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        place(spikeType, nearestEnemyAngle);
        doNewSend(["5", [primary, true]]);
        doNewSend(["13c", [1, 7, 0]]);
        doNewSend(["13c", [0, 7, 0]]);
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["13c", [0, 0, 1]]); // 21
        doNewSend(["c", [1]]);
       // place(spikeType, nearestEnemyAngle);
        setTimeout( () => {
            doNewSend(["c", [0, null]]);
            doNewSend(["5", [secondary, true]]);
            doNewSend(["13c", [1, 53, 0]]);
            doNewSend(["13c", [0, 21, 0]]);
        }, 80);
        setTimeout( () => {
          doNewSend(["5", [primary, true]]);
            doNewSend(["13c", [1, 6, 0]]);
            doNewSend(["13c", [0, 6, 0]]);
        }, 222);
        }
// instakill
    if(e.keyCode == 82 && document.activeElement.id.toLowerCase() !== 'chatbox') {
                 autoaim = true;
        doNewSend(["13c", [0, 0, 0]]);
        doNewSend(["13c", [0, 0, 18]]);
        doNewSend(["13c", [1, 53, 0]]);
        doNewSend(["13c", [0, 53, 0]]);
        doNewSend(["5", [primary, true]]);
        setTimeout(() => {
        doNewSend(["7", [2]]);
            doNewSend(["13c", [1, 7, 0]]);
            doNewSend(["13c", [0, 7, 0]]);
            doNewSend(["13c", [0, 21, 1]]);
            doNewSend(["13c", [1, 21, 1]]);
        }, 80);
                setTimeout(() => {
        doNewSend(["5", [secondary, true]]);
            doNewSend(["13c", [1, 7, 0]]);
            doNewSend(["13c", [0, 7, 0]]);
            doNewSend(["13c", [0, 21, 1]]);
            doNewSend(["13c", [1, 21, 1]]);
        }, 160);
          setTimeout(() => {
              autoaim = false
        doNewSend(["5", [primary, true]]);
            doNewSend(["13c", [1, 6, 0]]);
            doNewSend(["13c", [0, 6, 0]]);
            doNewSend(["13c", [0, 11, 1]]);
            doNewSend(["13c", [1, 11, 1]]);
        }, 400);
    }
    if(e.keyCode == 97 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(["6", [4]]);
    }
    if(e.keyCode == 98 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(["6", [15]]);
    }
    if(e.keyCode == 98 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(["6", [12]]);
    }
    if(e.keyCode == 105 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(["6", [28]]);
    }
    if(e.keyCode == 104 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(["6", [21]]);
    }
    if(e.keyCode == 101 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(["6", [25]]);
    }
    if(e.keyCode == 102 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(["6", [13]]);
    }
    if(e.keyCode == 99 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        doNewSend(["6", [2]]);
    }

    if(e.keyCode == 188 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        healToggle = (healToggle + 1) % 2;
        if(healToggle == 0) {
            if(hatToggle == 0) {
            } else {
            }
        } else {
            if(hatToggle == 0) {
            } else {
            }
        }
    }

    if(e.keyCode == 190 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        hatToggle = (hatToggle + 1) % 2;
        if(healToggle == 0) {
            if(hatToggle == 0) {
            } else {
            }
        } else {
            if(hatToggle == 0) {
            } else {
            }
        }
    }
})

document.addEventListener('keyup', (e)=>{
    spikePlacer.stop(e.keyCode);
    boostPlacer.stop(e.keyCode);
    fourSpawnpads.stop(e.keyCode);
    millPlacer.stop(e.keyCode);
    turretPlacer.stop(e.keyCode);
    healer1.stop(e.keyCode);
    healer2.stop(e.keyCode);
    if(e.keyCode == 0 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        setTimeout( () => {
            doNewSend(["33", [null]]);
            boostDir = null;
        }, 10);
    }
})


function isElementVisible(e) {
    return (e.offsetParent !== null);
}


function toRad(angle) {
    return angle * 0.01745329251;
}

function dist(a, b){
    return Math.sqrt( Math.pow((b.y-a[2]), 2) + Math.pow((b.x-a[1]), 2) );
}

function animate(space, chance) {
    let result = '';
    let characters;
    if(space) {
        characters = '';
    } else {
        characters = '';
    }
    if(space) {
        characters = characters.padStart((30 - characters.length) / 2 + characters.length)
        characters = characters.padEnd(30);
    }
    let count = 0;
    for (let i = 0; i < characters.length; i++ ) {
       if(Math.floor(Math.random() * chance) == 1 && characters.charAt(i) != "-" && count < 2 && characters.charAt(i) != " ") {
           result += " ";
           count++
       } else {
           result += characters.charAt(i);
       }
    }
    return result;
}

function update() {
    for (let i=0;i<9;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            primary = i;
        }
    }

    for (let i=9;i<16;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            secondary = i;
        }
    }

    for (let i=16;i<19;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            foodType = i - 16;
        }
    }

    for (let i=19;i<22;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            wallType = i - 16;
        }
    }

    for (let i=22;i<26;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            spikeType = i - 16;
        }
    }

    for (let i=26;i<29;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            millType = i - 16;
        }
    }

    for (let i=29;i<31;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            mineType = i - 16;
        }
    }

    for (let i=31;i<33;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            boostType = i - 16;
        }
    }

    for (let i=33;i<36;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            turretType = i - 16;
        }
    }

    for (let i=36;i<37;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            spawnpadType = i - 16;
        }
    }

    for (let i=37;i<39;i++){
        if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
            turretType = i - 16;
        }
    }
}
//reload bars
window.primaryReloadColor = "#ffff57";
window.secondaryReloadColor = "#ffff57";


try {

    function log(asdas) {
        console.log(asdas);
    }

    let maxScreenWidth = 1920;
    let maxScreenHeight = 1080;
    let screenWidth;
    let screenHeight;
    let screenW = maxScreenWidth / 2;
    let screenH = maxScreenHeight / 2;
    let delta;
    let now;
    let lastUpdate = Date.now();
    let camX;
    let camY;
    let mouseX = 0;
    let mouseY = 0;

    let gameCanvas = document.getElementById("gameCanvas");
    let mainContext = gameCanvas.getContext("2d");

    let config = window.config;
    config.tickRate = (1000 / 9);

    let players = [];
    let tmpObj = new Map();
    let player = new Map();

    function findPlayerByID(id) {
        for (var i = 0; i < players.length; ++i) {
            if (players[i].id == id) {
                return players[i];
            }
        }
        return null;
    }

    function findPlayerBySID(sid) {
        for (var i = 0; i < players.length; ++i) {
            if (players[i].sid == sid) {
                return players[i];
            }
        }
        return null;
    }

    let items = {
        weapons: [{
            speed: 300
        }, {
            speed: 400
        }, {
            speed: 400
        }, {
            speed: 300
        }, {
            speed: 300
        }, {
            speed: 700
        }, {
            speed: 300
        }, {
            speed: 100
        }, {
            speed: 400
        }, {
            speed: 600
        }, {
            speed: 400
        }, {
            speed: 1
        }, {
            speed: 700
        }, {
            speed: 230
        }, {
            speed: 700
        }, {
            speed: 1500
        }]
    }
    function setData(tmpObj, data) {
        tmpObj.id = data[0];
        tmpObj.sid = data[1];
        tmpObj.name = data[2];
        tmpObj.x = data[3];
        tmpObj.y = data[4];
        tmpObj.dir = data[5];
        tmpObj.health = data[6];
        tmpObj.maxHealth = data[7];
        tmpObj.scale = data[8];
        tmpObj.skinColor = data[8];
        tmpObj.reloads = {
            0: 0,
            1: 0,
            2: 0,
            3: 0,
            4: 0,
            5: 0,
            6: 0,
            7: 0,
            8: 0,
            9: 0,
            10: 0,
            11: 0,
            12: 0,
            13: 0,
            14: 0,
            15: 0,
            53: 0
        };
        tmpObj.primaryIndex = undefined;
        tmpObj.secondaryIndex = undefined;
        tmpObj.gatherIndex = undefined;
        tmpObj.shootIndex = undefined;
        tmpObj.gathering = 0;
        tmpObj.shooting = {};
    }

    let UTILS = {
        getDist: function (tmp1, tmp2, type1, type2) {
            let tmpXY1 = {
                x: type1 == 0 ? tmp1.x : type1 == 1 ? tmp1.x1 : type1 == 2 && tmp1.x2,
                y: type1 == 0 ? tmp1.y : type1 == 1 ? tmp1.y1 : type1 == 2 && tmp1.y2
            }
            let tmpXY2 = {
                x: type2 == 0 ? tmp2.x : type2 == 1 ? tmp2.x1 : type2 == 2 && tmp2.x2,
                y: type2 == 0 ? tmp2.y : type2 == 1 ? tmp2.y1 : type2 == 2 && tmp2.y2
            }
            return Math.sqrt((tmpXY2.x -= tmpXY1.x) * tmpXY2.x + (tmpXY2.y -= tmpXY1.y) * tmpXY2.y);
        },
        getDirect: function (tmp1, tmp2, type1, type2) {
            let tmpXY1 = {
                x: type1 == 0 ? tmp1.x : type1 == 1 ? tmp1.x1 : type1 == 2 && tmp1.x2,
                y: type1 == 0 ? tmp1.y : type1 == 1 ? tmp1.y1 : type1 == 2 && tmp1.y2
            }
            let tmpXY2 = {
                x: type2 == 0 ? tmp2.x : type2 == 1 ? tmp2.x1 : type2 == 2 && tmp2.x2,
                y: type2 == 0 ? tmp2.y : type2 == 1 ? tmp2.y1 : type2 == 2 && tmp2.y2
            }
            return Math.atan2(tmpXY1.y - tmpXY2.y, tmpXY1.x - tmpXY2.x);
        },
        fixTo: function (n, v) {
            return parseFloat(n.toFixed(v));
        },
        toRad: function (angle) {
            return angle * (Math.PI / 180);
        }
    }

    let inWindow = true;
    window.onblur = function() {
        inWindow = false;
    };
    window.onfocus = function() {
        inWindow = true;
    };

    let msgPack = window.msgpack;
    let WS;

    WebSocket.prototype.tmpSend = WebSocket.prototype.send;
    WebSocket.prototype.send = function (message) {
        if (!WS) {
            WS = this;
            WS.addEventListener("message", function(msg) {
                getMessage(msg);
            });
        }
        this.tmpSend(message);
    }

    window.addEventListener('resize', resize);

    function resize() {
        screenWidth = window.innerWidth;
        screenHeight = window.innerHeight;
    }
    resize();

    function getMessage(message) {
        let data = new Uint8Array(message.data);
        let decode = msgPack.decode(data);
        let packetList = {
            "id": "setInitData",
            "d": "disconnect",
            "1": "setupGame",
            "2": "addPlayer",
            "4": "removePlayer",
            "33": "updatePlayers",
            "5": "updateLeaderboard",
            "6": "loadGameObject",
            "a": "loadAI",
            "aa": "animateAI",
            "7": "gatherAnimation",
            "8": "wiggleGameObject",
            "sp": "shootTurret",
            "9": "updatePlayerValue",
            "h": "updateHealth",
            "11": "killPlayer",
            "12": "killObject",
            "13": "killObjects",
            "14": "updateItemCounts",
            "15": "updateAge",
            "16": "updateUpgrades",
            "17": "updateItems",
            "18": "addProjectile",
            "19": "remProjectile",
            "20": "serverShutdownNotice",
            "ac": "addAlliance",
            "ad": "deleteAlliance",
            "an": "allianceNotification",
            "st": "setPlayerTeam",
            "sa": "setAlliancePlayers",
            "us": "updateStoreItems",
            "ch": "receiveChat",
            "mm": "updateMinimap",
            "t": "showText",
            "p": "pingMap",
            "pp": "pingSocketResponse"
        };
        let packet = {
            name: packetList[decode[0]],
            arg: function (data) {
                return decode[1][data]
            }
        }
        let checkName = function (name) {
            return packet.name === name;
        }
        if (checkName("setupGame")) {
            player.sid = packet.arg(0);
        }
        if (checkName("addPlayer")) {
            let data = packet.arg(0);
            let isYou = packet.arg(1);
            let tmpPlayer = findPlayerByID(data[0]);
            if (!tmpPlayer) {
                tmpPlayer = new Map();
                players.push(tmpPlayer);
            }
            tmpPlayer.visible = false;
            tmpPlayer.x2 = undefined;
            tmpPlayer.y2 = undefined;
            setData(tmpPlayer, data);
            if (isYou) {
                player = tmpPlayer;
                camX = player.x;
                camY = player.y;
            }
        }
        if (checkName("removePlayer")) {
            let id = packet.arg(0);
            for (var i = 0; i < players.length; i++) {
                if (players[i].id == id) {
                    players.splice(i, 1);
                    break;
                }
            }
        }
        if (checkName("updatePlayers")) {
            let data = packet.arg(0);
            let tmpTime = Date.now();
            for (let i = 0; i < players.length; ++i) {
                players[i].forcePos = !players[i].visible;
                players[i].visible = false;
            }
            for (let i = 0; i < data.length;) {
                tmpObj = findPlayerBySID(data[i]);
                if (tmpObj) {
                    tmpObj.t1 = (tmpObj.t2 === undefined) ? tmpTime : tmpObj.t2;
                    tmpObj.t2 = tmpTime;
                    tmpObj.x1 = tmpObj.x;
                    tmpObj.y1 = tmpObj.y;
                    tmpObj.x2 = data[i + 1];
                    tmpObj.y2 = data[i + 2];
                    tmpObj.dt = 0;
                    tmpObj.buildIndex = data[i + 4];
                    tmpObj.weaponIndex = data[i + 5];
                    tmpObj.visible = true;
                    if (tmpObj.weaponIndex < 9) {
                        tmpObj.primaryIndex = tmpObj.weaponIndex;
                    } else if (tmpObj.weaponIndex > 8) {
                        tmpObj.secondaryIndex = tmpObj.weaponIndex;
                    }
                    if (tmpObj.shooting[53]) {
                        tmpObj.shooting[53] = 0;
                        tmpObj.reloads[53] = 2500 - config.tickRate;
                    } else {
                        if (tmpObj.reloads[53] > 0) {
                            tmpObj.reloads[53] = Math.max(0, tmpObj.reloads[53] - config.tickRate);
                        }
                    }
                    if (tmpObj.gathering || tmpObj.shooting[1]) {
                        if (tmpObj.gathering) {
                            tmpObj.gathering = 0;
                            tmpObj.reloads[tmpObj.gatherIndex] = items.weapons[tmpObj.gatherIndex].speed * (tmpObj.skinIndex == 20 ? (0.78) : 1);
                        }
                        if (tmpObj.shooting[1]) {
                            tmpObj.shooting[1] = 0;
                            tmpObj.reloads[tmpObj.shootIndex] = items.weapons[tmpObj.shootIndex].speed * (tmpObj.skinIndex == 20 ? (0.78) : 1);
                        }
                    } else {
                        if (tmpObj.buildIndex < 0) {
                            if (tmpObj.reloads[tmpObj.weaponIndex] > 0) {
                                tmpObj.reloads[tmpObj.weaponIndex] = Math.max(0, tmpObj.reloads[tmpObj.weaponIndex] - config.tickRate);
                            }
                        }
                    }
                }
                i += 13;
            }
        }
        if (checkName("gatherAnimation")) {
            let sid = packet.arg(0);
            let didHit = packet.arg(1);
            let index = packet.arg(2);
            tmpObj = findPlayerBySID(sid);
            if (tmpObj) {
                tmpObj.gatherIndex = index;
                tmpObj.gathering = 1;
            }
        }
        if (checkName("addProjectile")) {
            let x = packet.arg(0);
            let y = packet.arg(1);
            let dir = packet.arg(2);
            let range = packet.arg(3);
            let speed = packet.arg(4);
            let indx = packet.arg(5);
            let layer = packet.arg(6);
            let sid = packet.arg(7);
            if (inWindow) {
                let weaponIndx = indx == 0 ? 9 : indx == 2 ? 12 : indx == 3 ? 13 : indx == 5 && 15;
                let projOffset = config.playerScale * 2;
                let projXY = {
                    x: indx == 1 ? x : x - (projOffset * Math.cos(dir)),
                    y: indx == 1 ? y : y - (projOffset * Math.sin(dir))
                }
                let testXY = function(tmpObj) {
                    return {
                        x: tmpObj.x2 + ((tmpObj.x2 - tmpObj.x1) / 2),
                        y: tmpObj.y2 + ((tmpObj.y2 - tmpObj.y1) / 2)
                    };
                }
                let nearPlayer = players.filter(e => e.visible && UTILS.getDist(projXY, testXY(e), 0, 0) <= projOffset).sort(function(a, b) {
                    return UTILS.getDist(projXY, testXY(a), 0, 0) - UTILS.getDist(projXY, testXY(b), 0, 0);
                })[0];
                if (nearPlayer) {
                    if (indx == 1) {
                        nearPlayer.shooting[53] = 1;
                    } else {
                        nearPlayer.shootIndex = weaponIndx;
                        nearPlayer.shooting[1] = 1;
                    }
                }
            }
        }
    }
    let outlineColor = "#525252";
    let darkOutlineColor = "#3d3f42";
    function updateGame() {
        if (player) {
            let tmpXY = {
                x: camX,
                y: camY
            };
            let tmpDist = UTILS.getDist(tmpXY, player, 0, 0);
            let tmpDir = UTILS.getDirect(player, tmpXY, 0, 0);
            let camSpd = Math.min(tmpDist * 0.01 * delta, tmpDist);
            if (tmpDist > 0.05) {
                camX += camSpd * Math.cos(tmpDir);
                camY += camSpd * Math.sin(tmpDir);
            } else {
                camX = player.x;
                camY = player.y;
            }
        } else {
            camX = config.mapScale / 2;
            camY = config.mapScale / 2;
        }
        let lastTime = now - (1000 / config.serverUpdateRate);
        let tmpDiff;
        for (var i = 0; i < players.length; i++) {
            tmpObj = players[i];
            if (tmpObj && tmpObj.visible) {
                if (tmpObj.forcePos) {
                    tmpObj.x = tmpObj.x2;
                    tmpObj.y = tmpObj.y2;
                } else {
                    let total = tmpObj.t2 - tmpObj.t1;
                    let fraction = lastTime - tmpObj.t1;
                    let ratio = (fraction / total);
                    let rate = 170;
                    tmpObj.dt += delta;
                    let tmpRate = Math.min(1.7, tmpObj.dt / rate);
                    let tmpDiff = (tmpObj.x2 - tmpObj.x1);
                    tmpObj.x = tmpObj.x1 + (tmpDiff * tmpRate);
                    tmpDiff = (tmpObj.y2 - tmpObj.y1);
                    tmpObj.y = tmpObj.y1 + (tmpDiff * tmpRate);
                }
            }
        }
        let xOffset = camX - (maxScreenWidth / 2);
        let yOffset = camY - (maxScreenHeight / 2);
        for (let i = 0; i < players.length; ++i) {
            tmpObj = players[i];
            if (tmpObj.visible) {

                mainContext.fillStyle = darkOutlineColor;
                mainContext.roundRect(tmpObj.x - xOffset - config.healthBarWidth - config.healthBarPad + 50,
                                      (tmpObj.y - yOffset + tmpObj.scale) + config.nameY - 13, config.healthBarWidth +
                                      (config.healthBarPad * 2), 17, 8);
                mainContext.fill();

                mainContext.fillStyle = window.secondaryReloadColor;
                mainContext.roundRect(tmpObj.x - xOffset - config.healthBarWidth + 50,
                                      (tmpObj.y - yOffset + tmpObj.scale) + config.nameY - 13 + config.healthBarPad,
                                      (config.healthBarWidth * (tmpObj.reloads[tmpObj.secondaryIndex] == undefined ? 1 : ((items.weapons[tmpObj.secondaryIndex].speed - tmpObj.reloads[tmpObj.secondaryIndex]) / items.weapons[tmpObj.secondaryIndex].speed))), 17 - config.healthBarPad * 2, 7);
                mainContext.fill();

                mainContext.fillStyle = darkOutlineColor;
                mainContext.roundRect(tmpObj.x - xOffset - config.healthBarWidth - config.healthBarPad,
                                      (tmpObj.y - yOffset + tmpObj.scale) + config.nameY - 13, config.healthBarWidth +
                                      (config.healthBarPad * 2), 17, 8);
                mainContext.fill();

                mainContext.fillStyle = window.primaryReloadColor;
                mainContext.roundRect(tmpObj.x - xOffset - config.healthBarWidth,
                                      (tmpObj.y - yOffset + tmpObj.scale) + config.nameY - 13 + config.healthBarPad,
                                      (config.healthBarWidth * (tmpObj.reloads[tmpObj.primaryIndex] == undefined ? 1 : ((items.weapons[tmpObj.primaryIndex].speed - tmpObj.reloads[tmpObj.primaryIndex]) / items.weapons[tmpObj.primaryIndex].speed))), 17 - config.healthBarPad * 2, 7);
                mainContext.fill();
            }
        }

    }
    function doUpdate() {
        now = Date.now();
        delta = now - lastUpdate;
        lastUpdate = now;
        updateGame();
        window.requestAnimFrame(doUpdate);
    }
    doUpdate();

} catch (e) {
    throw new Error(e);
}
